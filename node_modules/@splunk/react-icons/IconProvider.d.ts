import React from 'react';
import PropTypes from 'prop-types';
export interface IconProviderProps {
    children?: React.ReactNode;
    /**
     *
     * `duplicateRepeatedIcons` implements an alternative rendering approach where a `use` tag is
     * rendered to duplicate subsequent renders of the same icon. This may improve performance on
     * renders of recurrent icons in a localized area of an application.
     *
     * This feature does not work with Enterprise icons.
     *
     * For example, here the `IconProvider` renders a single instance of the `<Chain/>` icons paths,
     * then renders the subsequent icons with a `<use>` tag to allow the browser to duplicate
     * the icon.
     *
     * ```jsx
     * return (
     *     <IconProvider>
     *         <Chain/>
     *         <Chain/>
     *         <Chain/>
     *     </IconProvider>
     * );
     * ```
     */
    duplicateRepeatedIcons?: boolean;
}
export interface IconContextType {
    toRender: boolean;
    addIcon: (iconName: string, svgPath: React.ReactNode) => boolean;
    getIconExists: (iconName: string) => boolean;
}
export type IconType = Map<string, React.ReactNode | null>;
declare const IconContext: React.Context<IconContextType | null>;
/**
 * IconProvider enables experimental features across icons that may change at any time
 * and does not follow the semantic-versioning of the package.
 *
 * To use, wrap icons from '@splunk/react-icons/{icon}'.
 */
declare const IconProvider: {
    ({ children, duplicateRepeatedIcons }: IconProviderProps): JSX.Element;
    propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        duplicateRepeatedIcons: PropTypes.Requireable<boolean>;
    };
};
export { IconContext, IconProvider };
export default IconProvider;
