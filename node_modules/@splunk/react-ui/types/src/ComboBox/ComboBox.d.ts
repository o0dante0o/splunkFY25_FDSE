import React, { Component } from 'react';
import { Divider, Heading } from '@splunk/react-ui/Menu';
import Option from './Option';
import { ClassComponentProps } from '../utils/types';
/** @public */
type ComboBoxChangeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | React.MouseEvent<HTMLButtonElement | HTMLSpanElement> | React.KeyboardEvent<HTMLInputElement>, data: {
    name?: string;
    value: string;
}) => void;
/** @public */
type ComboBoxScrollBottomHandler = (event: React.UIEvent<HTMLDivElement> | React.KeyboardEvent<HTMLInputElement> | null) => void;
/** @public */
type ComboBoxBlurHandler = (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>, data: {
    name?: string;
    value: string;
}) => void;
/** @public */
type ComboBoxFocusHandler = (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>, data: {
    name?: string;
    value: string;
}) => void;
interface ComboBoxPropsBase {
    animateLoading?: boolean;
    /** Append removes rounded borders and border from the right side. */
    append?: boolean;
    /** All children must be instances of `ComboBox.Option`. */
    children?: React.ReactNode;
    /** If true, this component will not handle filtering. The parent must update the
     * Options based on the onChange value. */
    controlledFilter?: boolean;
    /**
     * The default placement of the dropdown menu. It might be rendered in a different direction
     * depending upon the space available.
     */
    defaultPlacement?: 'above' | 'below' | 'vertical';
    /** The initial value of the input. Only applicable in uncontrolled mode. */
    defaultValue?: string;
    /**
     * The id of the description. When placed in a ControlGroup, this is automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Highlight the field as having an error. The border and text will turn red.
     */
    error?: boolean;
    /**
     * The footer message can show additional information, such as a truncation message.
     */
    footerMessage?: React.ReactNode;
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * A React ref which is set to the input element when the component mounts and null when it unmounts.
     */
    inputRef?: React.Ref<HTMLInputElement>;
    isLoadingOptions?: boolean;
    /**
     * The id of the label. When placed in a ControlGroup, this is automatically set to the
     * ControlGroup's label.
     */
    labelledBy?: string;
    /**
     * The loading message to show when isLoadingOptions. */
    loadingMessage?: React.ReactNode;
    menuStyle?: React.CSSProperties;
    /** The name is returned with onChange events, which can be used to identify the
     * control when multiple controls share an onChange callback. */
    name?: string;
    /**
     * The noOptionsMessage is shown when there are no children and it's not loading, such as when
     * there are no Options matching the filter. This can be customized to the type of content,
     * for example: "No matching dashboards". You can insert content such as an error message or
     * communicate a minimum number of characters to enter to see results. */
    noOptionsMessage?: React.ReactNode;
    onBlur?: ComboBoxBlurHandler;
    onChange?: ComboBoxChangeHandler;
    onFocus?: ComboBoxFocusHandler;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    /**
     * A callback function invoked when the popover closes.
     */
    onClose?: () => void;
    /**
     * A callback function invoked when the popover opens.
     */
    onOpen?: () => void;
    /**
     * A callback function invoked when the menu is scrolled.
     */
    onScroll?: React.UIEventHandler<Element>;
    /**
     * A callback function for loading additional list items.
     * Called when the list is scrolled to the bottom or all items in the list are visible.
     * This is called with an event argument if this is the result of a scroll.
     *
     * This should be set this to `null` when all items are loaded.
     */
    onScrollBottom?: ComboBoxScrollBottomHandler;
    placeholder?: string;
    /** Prepend removes rounded borders from the left side. */
    prepend?: boolean;
    /** The size of the text input.
     * @themeNotes Supported by the `enterprise` theme only. */
    size?: 'small' | 'medium' | 'large';
    /** The value of the input. Only applicable in controlled mode. */
    value?: string;
    /**
     * @private Experimental. Use a virtualized `ResultsMenu` variant which will only render at most
     * `virtualization * 3` options in the DOM at any given time, and will have a type of infinite scroll behavior.
     * @throws if `virtualization` is defined but less than 2
     */
    virtualization?: number;
}
declare const defaultProps: Required<Pick<ComboBoxPropsBase, 'animateLoading' | 'controlledFilter' | 'defaultPlacement' | 'disabled' | 'error' | 'inline' | 'isLoadingOptions' | 'menuStyle' | 'placeholder' | 'size'>>;
interface ComboBoxPropsBaseControlled extends ComboBoxPropsBase {
    defaultValue?: never;
    onChange: ComboBoxChangeHandler;
    value?: string;
}
interface ComboBoxPropsBaseUncontrolled extends ComboBoxPropsBase {
    defaultValue?: string;
    value?: never;
}
type ComboBoxProps = ClassComponentProps<ComboBoxPropsBaseControlled | ComboBoxPropsBaseUncontrolled, typeof defaultProps, 'div'>;
interface ComboBoxState {
    activeIndex: number;
    anchor: HTMLDivElement | null;
    open: boolean;
    typedValue: string | undefined;
    value: string;
}
/**
 * `ComboBox` allows the user to select a predefined string or enter a new value. Unlike `Select`
 * and `Multiselect`, `Option` value must always be a string and `Option` does not have a label
 * property.
 */
declare class ComboBox extends Component<ComboBoxProps, ComboBoxState> {
    private activeItemId;
    private activeValue?;
    private availableOptionCount;
    private controlledExternally;
    private focusCalledInternally;
    private options?;
    private popoverId;
    private previousActiveIndex;
    private textInput;
    static propTypes: React.WeakValidationMap<ComboBoxProps>;
    static defaultProps: Required<Pick<ComboBoxPropsBase, "placeholder" | "disabled" | "size" | "inline" | "error" | "defaultPlacement" | "animateLoading" | "isLoadingOptions" | "menuStyle" | "controlledFilter">>;
    static Option: typeof Option;
    static Divider: typeof Divider;
    static Heading: typeof Heading;
    constructor(props: Readonly<ComboBoxProps>);
    componentDidUpdate(prevProps: Readonly<ComboBoxProps>, prevState: Readonly<ComboBoxState>): void;
    private getValue;
    private getDisplayValue;
    private handleInputMount;
    private handleAnchorMount;
    private handleActiveOptionMount;
    private handleInputFocus;
    private handleChange;
    private handleSelectOption;
    private handleInputKeyDown;
    private handleInputClick;
    private handleRequestClose;
    private handleScrollBottom;
    private prepareOptions;
    private renderMenu;
    private open;
    private close;
    /**
     * Focus the `ComboBox`.
     */
    focus(): void;
    private isControlled;
    render(): JSX.Element;
}
export default ComboBox;
export { ComboBoxBlurHandler, ComboBoxChangeHandler, ComboBoxFocusHandler, Option, Divider, Heading, };
