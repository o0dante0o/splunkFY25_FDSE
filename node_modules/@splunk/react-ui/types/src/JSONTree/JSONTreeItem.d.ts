import React from 'react';
import PropTypes from 'prop-types';
import { JSONElement } from './JSONTree';
import { TreeItemPropsBase } from '../Tree';
import { ComponentProps } from '../utils/types';
type ExpandLinkHandler = (data: {
    open: boolean;
    withTooltip: boolean;
}) => {
    expandLink: JSX.Element;
    expandLinkRef: React.RefObject<HTMLButtonElement>;
};
interface JSONTreeItemPropsBase extends TreeItemPropsBase {
    clickableKeyRef?: React.RefObject<HTMLButtonElement> | undefined;
    clickableValRef?: React.RefObject<HTMLButtonElement> | undefined;
    hasChildren?: boolean;
    indentArray?: string[];
    index: number;
    initialOpenState: boolean;
    properties?: string[];
    propertyDataPath: string;
    propertyElement?: JSX.Element | undefined;
    renderExpandLink?: ExpandLinkHandler;
    representation?: JSX.Element | JSX.Element[];
    value?: JSONElement;
}
type JSONTreeItemProps = ComponentProps<JSONTreeItemPropsBase, 'li'>;
export declare function JSONTreeItem({ clickableKeyRef, clickableValRef, hasChildren, indentArray, index, initialOpenState, onFocus, properties, propertyDataPath, propertyElement, renderExpandLink, representation, value, ...otherProps }: JSONTreeItemProps): JSX.Element;
export declare namespace JSONTreeItem {
    var propTypes: {
        clickableKeyRef: PropTypes.Requireable<object>;
        clickableValRef: PropTypes.Requireable<object>;
        hasChildren: PropTypes.Requireable<boolean>;
        indentArray: PropTypes.Requireable<(string | null | undefined)[]>;
        index: PropTypes.Requireable<number>;
        initialOpenState: PropTypes.Requireable<boolean>;
        properties: PropTypes.Requireable<(string | null | undefined)[]>;
        propertyDataPath: PropTypes.Requireable<string>;
        propertyElement: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        renderExpandLink: PropTypes.Requireable<(...args: any[]) => any>;
        representation: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        value: PropTypes.Requireable<NonNullable<string | number | boolean | object | null | undefined>>;
    };
}
export {};
