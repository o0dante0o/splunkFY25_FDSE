import React, { Component } from 'react';
import { DateTableChangeHandler } from './DateTable';
import { ClassComponentProps } from '../utils/types';
type CalendarChangeHandler = DateTableChangeHandler;
declare const calendarActiveSelector = "[data-active-day=\"true\"]";
interface CalendarPropsBase {
    /**
     * The id of the description. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Highlight today's day. */
    highlightToday?: boolean;
    /**
     * The id of the label. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's label.
     */
    labelledBy?: string;
    /** Locale set by language and localization specifiers. */
    locale?: string;
    /**
     * Called when a date is selected from the Calendar.
     */
    onChange?: CalendarChangeHandler;
    /** @private. */
    required?: boolean;
    /**
     * The current date value formatted 'YYYY-MM-DD'.
     */
    value?: string;
}
declare const defaultProps: Required<Pick<CalendarPropsBase, 'locale' | 'value'>>;
type CalendarProps = ClassComponentProps<CalendarPropsBase, typeof defaultProps, 'div'>;
interface CalendarState {
    internalValue: string;
    todayValue: string;
    source: 'day' | 'month' | null;
}
declare class Calendar extends Component<CalendarProps, CalendarState> {
    private monthHeaderId;
    private todayTimerId?;
    private calendarRef;
    static propTypes: React.WeakValidationMap<CalendarProps>;
    static defaultProps: Required<Pick<CalendarPropsBase, "value" | "locale">>;
    constructor(props: Readonly<CalendarProps>);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: Readonly<CalendarProps>, prevState: Readonly<CalendarState>): void;
    /**
     * Place focus on the active day.
     */
    focusActiveDay(): void;
    private getToday;
    private handleMonthChange;
    private handleDayChange;
    private static validateValue;
    private handleCalendarMount;
    render(): JSX.Element;
}
export default Calendar;
export { CalendarChangeHandler, calendarActiveSelector };
