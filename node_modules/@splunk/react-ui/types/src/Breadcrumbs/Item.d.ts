import React from 'react';
import PropTypes from 'prop-types';
import { BreadcrumbsClickHandler } from './Breadcrumbs';
import { ComponentProps } from '../utils/types';
interface ItemPropsBase {
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLAnchorElement>;
    /**
     * @private. Passed by Breadcrumbs.
     */
    enableCurrentPage?: boolean;
    /**
     * Adornment at the end of the label.
     */
    endAdornment?: React.ReactNode;
    /**
     * @private. Passed by Breadcrumbs.
     */
    isCurrent?: boolean;
    /**
     * The label of the `Item`.
     */
    label: string;
    /**
     * An `onClick` handler for the current `Item`.
     */
    onClick?: BreadcrumbsClickHandler;
    /**
     * Adornment at the start of the label.
     */
    startAdornment?: React.ReactNode;
    /**
     * The URL or path to link to.
     */
    to: string;
}
type ItemProps = ComponentProps<ItemPropsBase, 'a'>;
declare function Item({ enableCurrentPage, endAdornment, isCurrent, label, onClick, startAdornment, to, ...otherProps }: ItemProps): JSX.Element;
declare namespace Item {
    var propTypes: {
        elementRef: PropTypes.Requireable<object>;
        enableCurrentPage: PropTypes.Requireable<boolean>;
        endAdornment: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        isCurrent: PropTypes.Requireable<boolean>;
        label: PropTypes.Validator<string>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        startAdornment: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        to: PropTypes.Validator<string>;
    };
    var defaultProps: Required<Pick<ItemPropsBase, "enableCurrentPage" | "isCurrent">>;
}
export default Item;
