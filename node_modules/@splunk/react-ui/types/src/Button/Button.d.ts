import React, { Component } from 'react';
import { legacyRefMode } from '@splunk/react-ui/Dropdown';
import { ClassComponentProps } from '../utils/types';
/** @public */
type ButtonClickHandler = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>, data: {
    action?: string;
    icon?: React.ReactNode;
    label?: React.ReactNode;
    value?: any;
}) => void;
interface ButtonPropsBase {
    /** Returns a value on click. Use when composing or testing. */
    action?: string;
    /** Changes the style of the button.
     * @themeNotes The `pill` appearance is deprecated and only supported in Enterprise themes. The `flat` and `toggle` appearances are deprecated and only supported in Prisma themes.
     */
    appearance?: 'default' | 'secondary' | 'primary' | 'destructive' | 'pill' | 'toggle' | 'flat' | 'subtle';
    /** Removes the right border and border-radius of the button so you can
     * append other elements to it. */
    append?: boolean;
    children?: React.ReactNode;
    /** @private An additional className to add to the button. */
    classNamePrivate?: string;
    /** Prevents user from clicking the button. If set to `dimmed`, the button
     * does not respond to mouse events but can still receive focus, and
     * `aria-disabled` is set to `true`. */
    disabled?: boolean | 'dimmed';
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLAnchorElement | HTMLButtonElement>;
    /**
     * @deprecated
     * Turns the button red. If you use this prop, apply other error
     * indicators, such as an error message, to meet accessibility
     * requirements.
     *
     * */
    error?: boolean;
    /** Applies the text that displays on the button. */
    label?: React.ReactNode;
    /** Applies an icon to the button. See @splunk/react-icons documentation for
     * more information. */
    icon?: React.ReactNode;
    /**
     * Restricts the horizontal size of the button. Set `inline` to `false` to
     * remove the right margin and stretch the button to the full width of
     * its container.  */
    inline?: boolean;
    /** Displays the chevron-down icon to indicate that the button behaves
     * as a menu. */
    isMenu?: boolean;
    /** Prevents callback when the button is disabled. */
    onClick?: ButtonClickHandler;
    /** Opens the 'to' link in a new browser tab.  */
    openInNewContext?: boolean;
    /** Removes the left border and border-radius of the button so you can
     * prepend elements to it. */
    prepend?: boolean;
    /** Adds the style to make the button appear selected. */
    selected?: boolean;
    /** Identifies the URL for a link. If set, Splunk UI applies an <a> tag
     * instead of a <button> tag. */
    to?: string;
    /** Returns a value on click. Use when composing or testing. */
    value?: any;
}
declare const defaultProps: Required<Pick<ButtonPropsBase, 'appearance' | 'append' | 'disabled' | 'error' | 'inline' | 'isMenu' | 'openInNewContext' | 'prepend'>>;
type ButtonButtonProps = ClassComponentProps<ButtonPropsBase, typeof defaultProps, 'button'>;
type ButtonLinkProps = ClassComponentProps<ButtonPropsBase, typeof defaultProps, 'a', 'href'>;
type ButtonProps = ButtonButtonProps | ButtonLinkProps;
declare class Button extends Component<ButtonProps> {
    private component;
    static propTypes: React.WeakValidationMap<ButtonProps>;
    static defaultProps: Required<Pick<ButtonPropsBase, "disabled" | "appearance" | "inline" | "error" | "openInNewContext" | "append" | "prepend" | "isMenu">>;
    static [legacyRefMode]: boolean;
    constructor(props: Readonly<ButtonProps>);
    private handleClick;
    private handleMount;
    /**
     * Places focus on the button.
     */
    focus(): void;
    render(): JSX.Element;
}
export default Button;
export { ButtonClickHandler };
