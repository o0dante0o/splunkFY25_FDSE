import React, { Component } from 'react';
import Panel from './Panel';
import { ClassComponentProps } from '../utils/types';
/** @public */
type AccordionChangeHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    event: React.MouseEvent<HTMLButtonElement>;
    panelId?: string | number;
    reason: 'toggleClick';
}) => void;
interface AccordionPropsBase {
    /**
     * Must be `Accordion.Panel`.
     */
    children?: React.ReactNode;
    /**
     * Sets the panel to expand on the initial render. Use only when using
     * `Accordion` as an uncontrolled component. Must match the `panelId` of
     * one of the `Accordion.Panel` children.
     */
    defaultOpenPanelId?: string | number;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Inset Accordions have padding for content to the panels
     */
    inset?: boolean;
    /**
     * Invoked on a change of the open panel. Callback is passed data, such as
     * the `panelId` of the `Accordion.Panel` that originated the expand request.
     * `panelId` is `undefined` when the open panel is collapsed.
     */
    onChange?: AccordionChangeHandler;
    /**
     * Indicates the `panelId` of the currently expanded `Accordion.Panel`.
     * Use only when using `Accordion` as a controlled component.
     */
    openPanelId?: string | number;
}
interface AccordionControlledProps extends AccordionPropsBase {
    defaultOpenPanelId?: never;
    onChange: AccordionChangeHandler;
    openPanelId?: string | number;
}
interface AccordionUncontrolledProps extends AccordionPropsBase {
    defaultOpenPanelId?: string | number;
    openPanelId?: never;
}
declare const defaultProps: {
    inset: boolean;
};
type AccordionProps = ClassComponentProps<AccordionControlledProps | AccordionUncontrolledProps, typeof defaultProps, 'div'>;
interface AccordionState {
    openPanelId?: string | number;
}
declare class Accordion extends Component<AccordionProps, AccordionState> {
    private controlledExternally;
    static propTypes: React.WeakValidationMap<AccordionProps>;
    static defaultProps: {
        inset: boolean;
    };
    static Panel: typeof Panel;
    constructor(props: Readonly<AccordionProps>);
    componentDidUpdate(prevProps: Readonly<AccordionProps>): void;
    private getCurrentOpenPanel;
    private handleChange;
    private isControlled;
    render(): JSX.Element;
}
export default Accordion;
export { AccordionChangeHandler, Panel };
