import React, { Component } from 'react';
import { Heading, Divider } from '@splunk/react-ui/Menu';
import { CompactPropsBase } from './Compact';
import Option from './Option';
import { ClassComponentProps } from '../utils/types';
/** @public */
type MultiselectFilterChangeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLSpanElement> | React.KeyboardEvent, data: {
    keyword: string;
}) => void;
/** @public */
type MultiselectChangeHandler = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLInputElement>, data: {
    name?: string;
    values: (string | number | boolean)[];
}) => void;
/** @public */
type MultiselectScrollBottomHandler = (event: React.UIEvent<HTMLDivElement> | React.KeyboardEvent<HTMLInputElement> | null) => void;
interface MultiselectPropsBase {
    animateLoading?: boolean;
    /**
     * Allow the user to add arbitrary values.
     */
    allowNewValues?: boolean;
    /**
     * When compact, options are shown as checkboxes and the input is a single line. This is
     * useful when placing the Multiselect in a horizontal bar, such as a filter.
     */
    compact?: boolean;
    /**
     * `children` should be `Multiselect.Option`, `Multiselect.Heading`, or
     * `Multiselect.Divider`.
     */
    children?: React.ReactNode;
    /** If true, this component will not handle filtering. The parent must update the
     * Options based on the onFilterChange value.
     *
     * Ignored in `compact` mode if the `filter` prop is provided.
     */
    controlledFilter?: boolean;
    /**
     * The default placement of the dropdown menu. It might be rendered in a different direction
     * depending upon the space available.
     */
    defaultPlacement?: 'above' | 'below' | 'vertical';
    /**
     * Set this property instead of value to keep the value uncontrolled.
     */
    defaultValues?: (string | number | boolean)[];
    /**
     * The id of the description. When placed in a ControlGroup, this is automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /** Disable adding and removing. */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts, and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLButtonElement | HTMLDivElement>;
    /** Display as in an error. */
    error?: boolean;
    /**
     * Determines whether to show the filter box. When true, the children are automatically
     * filtered based on the label. When controlled, the parent component must provide a
     * onFilterChange callback and update the children.
     *
     * Only supported when `compact=true`.
     */
    filter?: boolean | 'controlled';
    /**
     * The footer message can show additional information, such as a truncation message.
     */
    footerMessage?: React.ReactNode;
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * An id for the input, which may be necessary for accessibility, such as for aria
     * attributes.
     */
    inputId?: string;
    /**
     * A React ref which is set to the input element when the component mounts and null when it unmounts.
     */
    inputRef?: React.Ref<HTMLInputElement>;
    isLoadingOptions?: boolean;
    /**
     * The id of the label. When placed in a ControlGroup, this is automatically set to the
     * ControlGroup's label.
     */
    labelledBy?: string;
    /**
     * The loading message to show when isLoadingOptions. */
    loadingMessage?: React.ReactNode;
    /**
     * Style properties to apply to the Menu. This is primarily used to override the width of
     * the menu should it need to be wider than the toggle Button. */
    menuStyle?: React.CSSProperties;
    /** The name is returned with onChange events, which can be used to identify the
     * control when multiple controls share an onChange callback. */
    name?: string;
    /**
     * The noOptionsMessage is shown when there are no children and it's not loading, such as when
     * there are no Options matching the filter. This can be customized to the type of content,
     * for example: "No matching dashboards". You can insert other content, such as an error message, or
     * communicate a minimum number of characters to enter to see results. */
    noOptionsMessage?: React.ReactNode;
    /**
     * A callback to receive the change events.  If values is set, this callback is required.
     * This must set the values prop to retain the change.
     */
    onChange?: MultiselectChangeHandler;
    /**
     * A callback function invoked when the menu is scrolled.
     */
    onScroll?: React.UIEventHandler<Element>;
    /**
     * A callback function for loading additional list items.
     * Called when the list is scrolled to the bottom or all items in the list are visible.
     * This is called with an event argument if this is the result of a scroll.
     *
     * This should be set this to `null` when all items are loaded.
     */
    onScrollBottom?: MultiselectScrollBottomHandler;
    /**
     * A callback with the change event and value of the filter box. Providing this callback and
     * setting controlledFilter to true enables you to filter and update the children by other
     * criteria.
     */
    onFilterChange?: MultiselectFilterChangeHandler;
    /**
     * A callback function invoked when the popover closes.
     */
    onClose?: () => void;
    /**
     * A callback function invoked when the popover opens.
     */
    onOpen?: () => void;
    /**
     * If 'value' is undefined or doesn't match an item, the Button will display this text.
     */
    placeholder?: string;
    /**
     * See `repositionMode` on `Popover` for details.
     */
    repositionMode?: 'none' | 'flip';
    /**
     * Determines how to display Select all/Clear all.
     * Only supported when `compact=true`.
     */
    selectAllAppearance?: 'buttongroup' | 'checkbox';
    /**
     * When `compact=true`, move selected values to the top of the list on next open (default), immediately, or not at all.
     */
    showSelectedValuesFirst?: 'nextOpen' | 'immediately' | 'never';
    /** Pressing Tab while entering an input confirms the new value. Requires `allowNewValues`. */
    tabConfirmsNewValue?: boolean;
    /**
     * Specifies whether or not to add an overlay div to clickaway from the popover. This is
     * to avoid cases where some other element is accidentally clicked when the popover is open.
     * Note: This only works with the Normal multiselect.
     */
    useClickawayOverlay?: boolean;
    /**
     * Value will be matched to one of the children to deduce the label and/or icon for the
     * toggle.
     */
    values?: (string | number | boolean)[];
    /**
     * @private Experimental. Use a virtualized `ResultsMenu` variant which will only render at most
     * `virtualization * 3` options in the DOM at any given time, and will have a type of infinite scroll behavior.
     * This feature is only available in the `compact` variant
     * @throws if `virtualization` is defined but less than 2
     */
    virtualization?: number;
}
declare const defaultProps: Required<Pick<MultiselectPropsBase, 'allowNewValues' | 'animateLoading' | 'compact' | 'defaultPlacement' | 'disabled' | 'inline' | 'isLoadingOptions' | 'menuStyle' | 'noOptionsMessage' | 'placeholder' | 'repositionMode' | 'tabConfirmsNewValue' | 'useClickawayOverlay'>>;
interface MultiselectPropsBaseControlled extends MultiselectPropsBase {
    defaultValues?: never;
    onChange: MultiselectChangeHandler;
    values?: (string | number | boolean)[];
}
interface MultiselectPropsBaseUncontrolled extends MultiselectPropsBase {
    defaultValues?: (string | number | boolean)[];
    values?: never;
}
interface MultiselectPropsBaseNormal extends MultiselectPropsBase {
    compact?: false;
    elementRef?: React.Ref<HTMLDivElement>;
    showSelectedValuesFirst?: never;
}
interface MultiselectPropsBaseCompact extends MultiselectPropsBase {
    compact: true;
    elementRef?: React.Ref<HTMLButtonElement>;
    showSelectedValuesFirst?: 'nextOpen' | 'immediately' | 'never';
    /** @private */
    toggle?: CompactPropsBase['toggle'];
}
type MultiselectNormalProps = ClassComponentProps<(MultiselectPropsBaseControlled | MultiselectPropsBaseUncontrolled) & MultiselectPropsBaseNormal, typeof defaultProps, 'div'>;
type MultiselectCompactProps = ClassComponentProps<(MultiselectPropsBaseControlled | MultiselectPropsBaseUncontrolled) & MultiselectPropsBaseCompact, typeof defaultProps, 'button'>;
type MultiselectProps = MultiselectNormalProps | MultiselectCompactProps;
declare class Multiselect extends Component<MultiselectProps, {}> {
    static propTypes: React.WeakValidationMap<MultiselectProps>;
    static defaultProps: Required<Pick<MultiselectPropsBase, "placeholder" | "disabled" | "inline" | "compact" | "defaultPlacement" | "repositionMode" | "animateLoading" | "noOptionsMessage" | "allowNewValues" | "isLoadingOptions" | "menuStyle" | "tabConfirmsNewValue" | "useClickawayOverlay">>;
    static componentType: string;
    static Option: typeof Option;
    static Heading: typeof Heading;
    static Divider: typeof Divider;
    render(): JSX.Element;
}
export default Multiselect;
export { Divider, Heading, MultiselectChangeHandler, MultiselectFilterChangeHandler, MultiselectScrollBottomHandler, Option, };
