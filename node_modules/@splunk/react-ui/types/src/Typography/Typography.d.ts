import React from 'react';
import PropTypes from 'prop-types';
import { TypographyVariant, TypographyParams } from '@splunk/themes/mixins';
import { ComponentProps } from '../utils/types';
type TypographyElementTypes = 'p' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span' | 'blockquote' | 'dd' | 'dl' | 'dt' | 'figcaption' | 'figure' | 'li' | 'ol' | 'ul' | 'pre' | 'abbr' | 'cite' | 'code' | 'data' | 'dfn' | 'em' | 'u' | 'time' | 'sup' | 'sub' | 'strong' | 'small' | 'samp' | 's' | 'var' | 'ruby' | 'rt' | 'rp';
type DeprecatedTypographyWeightValues = 300 | 400 | 500 | 600 | 700 | 800 | 900;
interface TypographyPropsBase extends Omit<TypographyParams, 'weight'> {
    /**
     * Text and inline icons
     * */
    children: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts, and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLElement>;
    /**
     * Tag for the element to render children content into.
     * Use the most semantically appropriate tag.
     * Layout elements like `div` are not allowed; use the `typography` mixin from `@splunk/themes` instead.
     */
    as: TypographyElementTypes;
    /**
     * A variant from the Splunk Design System's Type: 'body', 'title1', 'title2', 'title3',
     * 'title4', 'title5', 'title6', 'title7', 'largeBody', 'smallBody',
     * 'footnote', 'monoBody', or 'monoSmallBody'.
     */
    variant?: TypographyVariant;
    /**
     * Set the font-family to sans-serif or monospace based on current theme.
     */
    family?: 'sansSerif' | 'monospace';
    /**
     * Set the size to a system-standard size.
     */
    size?: 56 | 36 | 32 | 24 | 20 | 18 | 16 | 14 | 12 | 10;
    /**
     * Set the line-height to a system-standard size.
     */
    lineHeight?: 64 | 40 | 32 | 28 | 24 | 22 | 20 | 16 | 13;
    /**
     * Set the color to a system-standard color: e.g. `active` for `@splunk/themes/variables.contentColorActive`.
     */
    color?: 'active' | 'default' | 'disabled' | 'inverted' | 'muted' | 'inherit';
    /**
     * Set the font-weight to a system-standard value.
     *
     * Number or equivalent string can be used.
     * See: [font-weight | MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)
     */
    weight?: DeprecatedTypographyWeightValues | 'light' | 'normal' | 'semiBold' | 'bold' | 'extraBold' | 'heavy';
    /**
     * Apply a reset to the element's margin and padding. This defaults to true if using a `variant`.
     */
    withReset?: boolean;
}
type TypographyProps = ComponentProps<TypographyPropsBase, TypographyElementTypes>;
/**
 * Typography renders text content with styling based on the Splunk Design System.
 */
export declare function Typography({ children, as, elementRef, variant, family, size, lineHeight, color, weight, withReset, ...otherProps }: TypographyProps): JSX.Element;
export declare namespace Typography {
    var propTypes: {
        children: PropTypes.Validator<NonNullable<PropTypes.ReactNodeLike>>;
        as: PropTypes.Validator<string>;
        elementRef: PropTypes.Requireable<object>;
        family: PropTypes.Requireable<string>;
        variant: PropTypes.Requireable<"body" | "title1" | "title2" | "title3" | "title4" | "title5" | "title6" | "title7" | "largeBody" | "smallBody" | "footnote" | "monoBody" | "monoSmallBody">;
        size: PropTypes.Requireable<number>;
        lineHeight: PropTypes.Requireable<number>;
        color: PropTypes.Requireable<string>;
        weight: PropTypes.Requireable<string | number>;
        withReset: PropTypes.Requireable<boolean>;
    };
}
export default Typography;
