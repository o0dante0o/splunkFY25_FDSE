import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Body from './Body';
import Caption from './Caption';
import Cell, { CellClickHandler } from './Cell';
import Head from './Head';
import HeadCell, { HeadCellSortHandler } from './HeadCell';
import HeadDropdownCell, { HeadDropdownCellPossibleCloseReason, HeadDropdownCellRequestCloseHandler, HeadDropdownCellRequestOpenHandler } from './HeadDropdownCell';
import Row, { RowActionPrimaryClickHandler, RowActionSecondaryClickHandler, RowClickHandler, RowRequestToggleHandler } from './Row';
import { ClassComponentProps } from '../utils/types';
/** @public */
type TableRequestMoveColumnHandler = (data: {
    columnId: any;
    fromIndex: number;
    toIndex: number;
}) => void;
/** @public */
type TableRequestMoveRowHandler = (data: {
    dataId?: string | number;
    fromIndex: number;
    toIndex: number;
}) => void;
/** @public */
type TableRequestResizeColumnHandler = (event: React.MouseEvent<HTMLHRElement> | React.KeyboardEvent<HTMLHRElement> | MouseEvent, data: {
    columnId: any;
    id?: string;
    index: number;
    width: number;
}) => void;
interface TablePropsBase {
    /**
     * Adds table-level actions. Not compatible with `onRequestResize`.
     * @includeTheme prisma
     */
    actions?: React.ReactElement[];
    /**
     * Specifies the width of the actions column. Adds an empty header for
     * row actions if no table-level actions are present.
     * @includeTheme prisma
     */
    actionsColumnWidth?: number;
    /**
     * Must be `Table.Head`, `Table.Body`, or `Table.Caption`.
     */
    children?: React.ReactNode;
    /**
     * Sets the offset from the top of the window. Only applies when `headType`
     * is 'docked'.
     */
    dockOffset?: number;
    /**
     * Docks the horizontal scroll bar at the bottom of the window when the bottom of the
     * table is below the viewport.
     */
    dockScrollBar?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Sets the table head type:
     *
     *  * `docked`: The head is docked against the window
     *  * `fixed` : The head is fixed in the table. The table can scroll
     *          independently from the head.
     *  * `inline`: The head isn't fixed, but can scroll with the rest of
     *          the table.
     */
    headType?: 'docked' | 'fixed' | 'inline';
    /**
     * Style specification for the inner container, which is the scrolling container.
     */
    innerStyle?: React.CSSProperties;
    /**
     * Callback invoked when a user clicks the row selection toggle in the header.
     */
    onRequestToggleAllRows?: () => void;
    /**
     * Callback invoked when a scroll event occurs on the inner scrolling container.
     */
    onScroll?: React.UIEventHandler<HTMLDivElement>;
    /**
     * Style specification for the outer container.
     */
    outerStyle?: React.CSSProperties;
    /**
     * Adds a column to the table with an expansion button for each row that has expansion
     * content. Supported values:
     *
     * * `single`: Only one row can be expanded at a time. If another expansion button is
     * clicked, the currently expanded row closes and the new one opens.
     * * `multi`: Allows mulitple rows to be expanded at the same time.
     * * `controlled`: Allows the expanded state to be externally managed by `expanded` prop of `Row`.
     * * `none`: The default with no row expansion.
     */
    rowExpansion?: 'single' | 'multi' | 'controlled' | 'none';
    /** Indicates the column to use as the primary label for each row.   */
    primaryColumnIndex?: number;
    /**
     * When an `onRequestToggleAllRows` handler is defined, this prop determines the appearance
     * of the toggle all rows button.
     */
    rowSelection?: 'all' | 'some' | 'none';
    /**
     * Alternate rows are given a darker background to improve readability.
     * @excludeTheme prisma
     */
    stripeRows?: boolean;
    /**
     * The style attribute for the table. This is primarily useful for setting the CSS
     * table-layout property.
     */
    tableStyle?: React.CSSProperties;
    /**
     * An event handler for handle the re-order action of Table. The function is passed an
     * options object with `fromIndex` and `toIndex`.
     */
    onRequestMoveColumn?: TableRequestMoveColumnHandler;
    /**
     * An event handler to handle the reorder rows action of Table. The function is passed an
     * options object with `dataId`, `fromIndex` and `toIndex`.
     *
     * This property requires a unique `key` to be passed to `Table.Row`.
     * Using the row index as the `key` will lead to issues with animations and focus restoration.
     */
    onRequestMoveRow?: TableRequestMoveRowHandler;
    /**
     * An event handler for resize of columns for the current column being resized. The function is passed an event and a data
     * object with `columnId`, `id`, `index`, and `width`.
     */
    onRequestResizeColumn?: TableRequestResizeColumnHandler;
    /**
     * Table will fill parent container. Resizable columns can have a `width` of `auto` only with this prop enabled.
     */
    resizableFillLayout?: boolean;
}
declare const defaultProps: Required<Pick<TablePropsBase, 'actions' | 'dockOffset' | 'headType' | 'rowExpansion' | 'rowSelection' | 'resizableFillLayout' | 'primaryColumnIndex'>>;
type TableProps = ClassComponentProps<TablePropsBase, typeof defaultProps, 'div'>;
declare function TableBase(props: TableProps): JSX.Element;
declare namespace TableBase {
    var propTypes: {
        actions: PropTypes.Requireable<(PropTypes.ReactElementLike | null | undefined)[]>;
        actionsColumnWidth: PropTypes.Requireable<number>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        dockOffset: PropTypes.Requireable<number>;
        dockScrollBar: PropTypes.Requireable<boolean>;
        elementRef: PropTypes.Requireable<object>;
        headType: PropTypes.Requireable<string>;
        innerStyle: PropTypes.Requireable<object>;
        onRequestToggleAllRows: PropTypes.Requireable<(...args: any[]) => any>;
        onScroll: PropTypes.Requireable<(...args: any[]) => any>;
        outerStyle: PropTypes.Requireable<object>;
        primaryColumnIndex: PropTypes.Requireable<number>;
        rowExpansion: PropTypes.Requireable<string>;
        rowSelection: PropTypes.Requireable<string>;
        stripeRows: PropTypes.Requireable<boolean>;
        tableStyle: PropTypes.Requireable<object>;
        onRequestMoveColumn: PropTypes.Requireable<(...args: any[]) => any>;
        onRequestMoveRow: PropTypes.Requireable<(...args: any[]) => any>;
        onRequestResizeColumn: PropTypes.Requireable<(...args: any[]) => any>;
        resizableFillLayout: PropTypes.Requireable<boolean>;
    };
}
declare class Table extends Component<TableProps, {}> {
    static propTypes: React.WeakValidationMap<TableProps>;
    static defaultProps: Required<Pick<TablePropsBase, "actions" | "headType" | "rowSelection" | "resizableFillLayout" | "primaryColumnIndex" | "dockOffset" | "rowExpansion">>;
    static Caption: typeof Caption;
    static Head: typeof Head;
    static HeadCell: typeof HeadCell;
    static HeadDropdownCell: typeof HeadDropdownCell;
    static Body: typeof Body;
    static Row: typeof Row;
    static Cell: typeof Cell;
    render(): JSX.Element;
}
export default Table;
export { Body, Caption, Cell, Head, HeadCell, HeadDropdownCell, Row, TableBase };
export type { CellClickHandler, HeadCellSortHandler, HeadDropdownCellPossibleCloseReason, HeadDropdownCellRequestCloseHandler, HeadDropdownCellRequestOpenHandler, RowActionPrimaryClickHandler, RowActionSecondaryClickHandler, RowClickHandler, RowRequestToggleHandler, TableRequestMoveColumnHandler, TableRequestMoveRowHandler, TableRequestResizeColumnHandler, };
