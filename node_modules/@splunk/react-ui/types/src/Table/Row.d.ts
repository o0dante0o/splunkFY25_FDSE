import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { TableRequestMoveRowHandler } from './Table';
import { ClassComponentProps } from '../utils/types';
/** @public */
type RowActionPrimaryClickHandler = (event: React.MouseEvent, data?: any) => void;
/** @public */
type RowActionSecondaryClickHandler = (event: React.MouseEvent, data?: any) => void;
/** @public */
type RowClickHandler = (event: React.MouseEvent<HTMLTableRowElement> | React.KeyboardEvent<HTMLTableRowElement>, data?: any) => void;
type RowRequestMoveRowHandler = TableRequestMoveRowHandler;
type RowExpansionHandler = (event: React.MouseEvent<HTMLTableCellElement> | React.KeyboardEvent<HTMLTableCellElement>, data?: any) => void;
/** @public */
type RowRequestExpansionHandler = (event: React.MouseEvent<HTMLTableCellElement> | React.KeyboardEvent<HTMLTableCellElement>, data?: any) => void;
/** @public */
type RowRequestToggleHandler = (event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>, data?: any) => void;
interface RowPropsBase {
    /** @private. Generally passed by Table rather than added directly. */
    activeElementId?: string;
    /**
     * Adds primary actions. For best results, use an icon-only button style.
     * The `onClick` handler of each action is passed the event and the `data` prop of this row.
     * @includeTheme prisma
     */
    actionPrimary?: React.ReactElement;
    /**
     * Adds a secondary actions dropdown menu. This prop must be a `Menu`.
     * The `onClick` handler of each action is passed the event and the `data` prop of this row.
     * @includeTheme prisma
     */
    actionsSecondary?: React.ReactElement;
    /**
     * Must be `Table.Cell`.
     */
    children?: React.ReactNode;
    /** This data is returned with the onClick and toggle events as the second argument. */
    data?: any;
    /** @private. Generally passed by Table rather than added directly. */
    dataId?: string | number;
    /** Indicates whether the row selection is disabled. */
    disabled?: boolean;
    /** @private. Generally passed by Table rather than added directly. */
    draggable?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLTableRowElement>;
    /** @private. */
    expandable?: boolean;
    /**
     * Allows row expansion to be controlled programmatically if the `rowExpansion` prop is set to `controlled` in `Table`.
     */
    expanded?: boolean;
    /**
     * An optional row that is displayed when this row is expanded, or an array of rows.
     */
    expansionRow?: React.ReactElement | React.ReactElement[];
    /** @private. Indicates whether the table has an actions column. */
    actions?: boolean;
    /** @private. Generally passed by `Table` rather than added directly. */
    index?: number;
    /** @private. Generally passed by `Table` rather than added directly. */
    movableColumns?: boolean;
    /** Providing an `onClick` handler enables focus, hover, and related styles. */
    onClick?: RowClickHandler;
    /**
     * An event handler that triggers when the row expansion element is selected.
     */
    onExpansion?: RowExpansionHandler;
    /** @private. This is passed through and works as expected. */
    onKeyDown?: React.KeyboardEventHandler<HTMLTableRowElement>;
    /** @private. Generally passed by `Table` rather than added directly. */
    onRequestMoveRow?: RowRequestMoveRowHandler;
    /**
     * An event handler for toggle of the row. resize of columns. The function is passed the event and the `data` prop for this row.
     */
    onRequestToggle?: RowRequestToggleHandler;
    /**
     * @private. Generally passed by Table rather than added directly. Indicates the column to use as the primary label for each row.
     */
    primaryColumnIndex?: number;
    /**
     * Indicates the row's label when selected or unselected.
     */
    rowScreenReaderText?: string;
    /**
     * When an `onRequestToggle` handler is defined, this prop determines the appearance
     * of the toggle.
     */
    selected?: boolean;
    /** @private. */
    stripe?: 'odd' | 'even' | 'none';
}
declare const defaultProps: Required<Pick<RowPropsBase, 'stripe' | 'primaryColumnIndex'>>;
type RowProps = ClassComponentProps<RowPropsBase, typeof defaultProps, 'tr'>;
declare function RowBase(props: RowProps): JSX.Element;
declare namespace RowBase {
    var propTypes: {
        /** @private. Generally passed by Table rather than added directly. */
        activeElementId: PropTypes.Requireable<string>;
        actionPrimary: PropTypes.Requireable<PropTypes.ReactElementLike>;
        actionsSecondary: PropTypes.Requireable<PropTypes.ReactElementLike>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        data: PropTypes.Requireable<any>;
        /** @private. Generally passed by Table rather than added directly. */
        dataId: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        disabled: PropTypes.Requireable<boolean>;
        /** @private. Generally passed by Table rather than added directly. */
        draggable: PropTypes.Requireable<boolean>;
        elementRef: PropTypes.Requireable<object>;
        /** @private. */
        expandable: PropTypes.Requireable<boolean>;
        expanded: PropTypes.Requireable<boolean>;
        expansionRow: PropTypes.Requireable<NonNullable<PropTypes.ReactElementLike | (PropTypes.ReactElementLike | null | undefined)[] | null | undefined>>;
        /** @private. Indicates whether the table has an actions column. */
        actions: PropTypes.Requireable<boolean>;
        /** @private. Generally passed by `Table` rather than added directly. */
        index: PropTypes.Requireable<number>;
        /** @private. Generally passed by `Table` rather than added directly. */
        movableColumns: PropTypes.Requireable<boolean>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onExpansion: PropTypes.Requireable<(...args: any[]) => any>;
        /** @private. This is passed through and works as expected. */
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        /** @private. Generally passed by `Table` rather than added directly. */
        onRequestMoveRow: PropTypes.Requireable<(...args: any[]) => any>;
        onRequestToggle: PropTypes.Requireable<(...args: any[]) => any>;
        /** @private. Generally passed by `Table` rather than added directly. */
        primaryColumnIndex: PropTypes.Requireable<number>;
        rowScreenReaderText: PropTypes.Requireable<string>;
        selected: PropTypes.Requireable<boolean>;
        /** @private. */
        stripe: PropTypes.Requireable<string>;
    };
}
declare class Row extends Component<RowProps, {}> {
    static splunkUiType: string;
    static propTypes: React.WeakValidationMap<RowProps>;
    static defaultProps: Required<Pick<RowPropsBase, "stripe" | "primaryColumnIndex">>;
    render(): JSX.Element;
}
export default Row;
export { RowActionPrimaryClickHandler, RowActionSecondaryClickHandler, RowBase, // exporting the base component for testing purpose
RowClickHandler, RowRequestExpansionHandler, RowRequestMoveRowHandler, RowRequestToggleHandler, RowExpansionHandler, };
