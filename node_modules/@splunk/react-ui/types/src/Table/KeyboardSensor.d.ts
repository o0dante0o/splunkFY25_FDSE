import { Transform } from '@dnd-kit/utilities';
import { Activators, SensorInstance, SensorProps, SensorOptions, KeyboardCodes, KeyboardCoordinateGetter } from '@dnd-kit/core';
import { Coordinates } from '@dnd-kit/core/dist/types/';
export declare class Listeners {
    private target;
    private listeners;
    constructor(target: EventTarget | null);
    add<T extends Event>(eventName: string, handler: (event: T) => void, options?: AddEventListenerOptions | boolean): void;
    removeAll: () => void;
}
export declare function parseTransform(transform: string): Transform | null;
type ClientRect = Pick<DOMRect, 'width' | 'height' | 'top' | 'right' | 'bottom' | 'left'>;
export declare function inverseTransform(rect: DOMRect, transform: string, transformOrigin: string): ClientRect;
interface Options {
    ignoreTransform?: boolean;
}
export declare function getClientRect(element: Element, options?: Options): {
    top: number;
    left: number;
    width: number;
    height: number;
    bottom: number;
    right: number;
};
export declare function getScrollElementRect(element: Element): {
    top: number;
    left: number;
    right: number;
    bottom: number;
    width: number;
    height: number;
};
export declare function isDocumentScrollingElement(element: Element | null): boolean;
export declare function getScrollPosition(scrollingContainer: Element): {
    isTop: boolean;
    isLeft: boolean;
    isBottom: boolean;
    isRight: boolean;
    maxScroll: {
        x: number;
        y: number;
    };
    minScroll: {
        x: number;
        y: number;
    };
};
export declare const defaultCoordinates: Coordinates;
export declare function isFixed(node: HTMLElement, computedStyle?: CSSStyleDeclaration): boolean;
export declare function isScrollable(element: HTMLElement, computedStyle?: CSSStyleDeclaration): boolean;
export declare function getScrollableAncestors(element: Node | null, limit?: number): Element[];
export declare function getFirstScrollableAncestor(node: Node | null): Element | null;
export declare function scrollIntoViewIfNeeded(element: HTMLElement | null | undefined, measure?: (node: HTMLElement) => ClientRect): void;
export interface KeyboardSensorOptions extends SensorOptions {
    coordinateGetter: KeyboardCoordinateGetter;
    keyboardCodes?: KeyboardCodes;
    scrollBehavior?: ScrollBehavior;
    onActivation?({ event }: {
        event: KeyboardEvent;
    }): void;
}
export type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;
export default class KeyboardSensor implements SensorInstance {
    private readonly props;
    autoScrollEnabled: boolean;
    private referenceCoordinates;
    private listeners;
    private windowListeners;
    constructor(props: KeyboardSensorProps);
    private attach;
    private handleStart;
    private handleKeyDown;
    private handleMove;
    private handleEnd;
    private handleCancel;
    private detach;
    static activators: Activators<KeyboardSensorOptions>;
}
export {};
