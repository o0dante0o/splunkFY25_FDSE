import React, { Component } from 'react';
import Panel from './Panel';
import { ClassComponentProps } from '../utils/types';
/** @public */
type TabLayoutChangeHandler = (event: React.MouseEvent<HTMLButtonElement> | React.FocusEvent<HTMLButtonElement>, data: {
    activePanelId?: string;
}) => void;
interface TabLayoutPropsBase {
    /** If `true`, tabs will trigger the `onChange` callback when they receive focus.  */
    autoActivate?: boolean;
    /**
     * Setting this prop to 'context' creates an appearance without an underline.
     * @includeTheme prisma
     */
    appearance?: 'navigation' | 'context';
    /**
     * Must be `TabLayout.Panel`.
     */
    children?: React.ReactNode;
    /** Inserts number in tab label. */
    count?: number;
    /**
     * Sets the active panel on the initial render. It must match the `panelId` of one of
     * the child `TabLayout.Panel`s. Only use `defaultActivePanelId` when using `TabLayout`
     * as an uncontrolled component.
     */
    defaultActivePanelId?: string;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Size of icon in `TabLayout.Panel` if it has an icon.
     * @excludeTheme prisma
     */
    iconSize?: 'inline' | 'small' | 'large';
    /**
     * The layout direction for tabs.
     */
    layout?: 'horizontal' | 'vertical';
    /** Width of each tab in pixels. Must be greater than 50 pixels. Leave blank for auto width. */
    tabWidth?: number;
    /**
     * A callback that receives the event and data (`selectedPanelId`). If activePanelId is set,
     * this callback is required.
     */
    onChange?: TabLayoutChangeHandler;
    /**
     * The `panelId` of the `TabLayout.Panel` to activate. If set, an `onChange` callback is required.
     */
    activePanelId?: string;
}
declare const defaultProps: Required<Pick<TabLayoutPropsBase, 'appearance' | 'iconSize' | 'layout'>>;
interface TabLayoutPropsBaseControlled extends TabLayoutPropsBase {
    defaultActivePanelId?: never;
    onChange: TabLayoutChangeHandler;
    activePanelId?: string;
}
interface TabLayoutPropsBaseUncontrolled extends TabLayoutPropsBase {
    defaultActivePanelId?: string;
    activePanelId?: never;
}
type TabLayoutProps = ClassComponentProps<TabLayoutPropsBaseControlled | TabLayoutPropsBaseUncontrolled, typeof defaultProps, 'div'>;
interface TabLayoutState {
    activePanelId?: string;
}
/**
 * The `TabLayout` is a group of managed `Panels`. Only one panel can be open at a time.
 * `TabLayout` supports both the controlled and uncontrolled patterns.
 */
declare class TabLayout extends Component<TabLayoutProps, TabLayoutState> {
    private controlledExternally;
    private guid;
    static propTypes: React.WeakValidationMap<TabLayoutProps>;
    static defaultProps: Required<Pick<TabLayoutPropsBase, "appearance" | "layout" | "iconSize">>;
    static Panel: typeof Panel;
    constructor(props: Readonly<TabLayoutProps>);
    componentDidUpdate(prevProps: Readonly<TabLayoutProps>): void;
    private handleChange;
    private isControlled;
    render(): JSX.Element;
}
export default TabLayout;
export { Panel, TabLayoutChangeHandler };
