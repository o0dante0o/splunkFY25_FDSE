import { AnyTheme, Interpolation, InterpolationResult, ThemedProps } from '@splunk/themes';
declare const buttonVariants: readonly ["primary", "secondary", "destructive", "subtle"];
type ButtonVariant = typeof buttonVariants[number];
type ButtonStyleProps = ThemedProps & Partial<{
    $append: boolean;
    $prepend: boolean;
    $selected: boolean;
    $error: boolean;
    disabled: boolean | string;
}>;
interface ButtonParams<T extends AnyTheme, A extends ThemedProps> {
    background?: InterpolationResult<T, A>;
    backgroundActive?: InterpolationResult<T, A>;
    backgroundDisabled?: InterpolationResult<T, A>;
    backgroundDisabledSelected?: InterpolationResult<T, A>;
    backgroundHover?: InterpolationResult<T, A>;
    backgroundSelected?: InterpolationResult<T, A>;
    borderColor?: InterpolationResult<T, A>;
    borderColorDisabled?: InterpolationResult<T, A>;
    color?: InterpolationResult<T, A>;
    colorDisabled?: InterpolationResult<T, A>;
}
declare function button<T extends AnyTheme, A extends ButtonStyleProps>(): Interpolation<T, A>;
declare function button<T extends AnyTheme, A extends ButtonStyleProps>(variant: ButtonVariant): Interpolation<T, A>;
declare function button<T extends AnyTheme, A extends ButtonStyleProps>(params: ButtonParams<T, A>): Interpolation<T, A>;
declare function button<T extends AnyTheme, A extends ButtonStyleProps>(variant: ButtonVariant, additionalParams: ButtonParams<T, A>): Interpolation<T, A>;
export default button;
