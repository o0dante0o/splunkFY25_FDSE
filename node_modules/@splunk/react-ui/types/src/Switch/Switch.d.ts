import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
/** @public */
type SwitchClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    selected: boolean;
    value?: any;
}) => void;
/** @public */
type SwitchCheckboxWithSomeClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    selected: boolean | 'some';
    value?: any;
}) => void;
interface SwitchPropsBase {
    appearance?: 'checkbox' | 'toggle';
    children?: React.ReactNode;
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts, and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Highlight the field as having an error.
     */
    error?: boolean;
    /**
     * If `Switch` is not provided children as the label, an id can be provided for the control.
     * Set a label's for attribute to this id to link the two elements.
     */
    id?: string;
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * In a couple of cases, the switch is to show state, but is not interactive in itself.
     * The parent takes focus and handles click. Set interactive to false to prevent focus and
     * hover states, and remove accessibility properties.
     * @private */
    interactive?: boolean;
    /**
     * If `Switch` is not provided children as the label, an id can be provided to
     * another element.
     */
    labelledBy?: string;
    onClick?: SwitchClickHandler | SwitchCheckboxWithSomeClickHandler;
    /** @private. */
    required?: boolean;
    /**
     * 'some' is only valid when appearance is 'checkbox'. The current value of `selected` is
     * passed to the onClick handler.
     */
    selected?: boolean | 'some';
    /**
     * The customized content presented to screen readers when selected.
     */
    selectedLabel?: string;
    /**
     * The customized content presented to screen readers when selected="some".
     */
    someSelectedLabel?: string;
    /**
     * The customized content presented to screen readers when unselected.
     */
    unselectedLabel?: string;
    /**
     * The `value` is used as an identifier and is passed to the `onClick` handler. This is
     * useful when managing a group of switches with a single `onClick` handler.
     */
    value?: any;
}
declare const defaultProps: Required<Pick<SwitchPropsBase, 'appearance' | 'disabled' | 'error' | 'inline' | 'interactive' | 'selected'>>;
interface SwitchCheckboxWithSomePropsBase extends SwitchPropsBase {
    appearance?: 'checkbox';
    onClick?: SwitchCheckboxWithSomeClickHandler;
    selected?: boolean | 'some';
}
interface SwitchNoSomePropsBase extends SwitchPropsBase {
    onClick?: SwitchClickHandler;
    selected?: boolean;
}
type SwitchProps = ClassComponentProps<SwitchCheckboxWithSomePropsBase | SwitchNoSomePropsBase, typeof defaultProps, 'div'> & {
    ref?: React.Ref<Switch>;
};
/**
 * `Switch` is a basic form control with an on/off state.
 */
declare class Switch extends Component<SwitchProps> {
    private clickableId;
    private labelId;
    private toggle;
    static propTypes: React.WeakValidationMap<SwitchProps>;
    static defaultProps: Required<Pick<SwitchPropsBase, "disabled" | "selected" | "appearance" | "inline" | "error" | "interactive">>;
    static validateProps({ selected, appearance }: Readonly<SwitchProps>): void;
    constructor(props: Readonly<SwitchProps>);
    componentDidUpdate: typeof Switch.validateProps;
    private handleContainerClick;
    /**
     * Place focus on the toggle.
     */
    focus(): void;
    render(): JSX.Element;
}
export default Switch;
export { SwitchClickHandler, SwitchCheckboxWithSomeClickHandler };
