import React, { Component } from 'react';
import SingleOpenPanelGroup, { SingleOpenPanelGroupChangeHandler } from './SingleOpenPanelGroup';
import SingleOpenPanelGroupContext from './SingleOpenPanelGroupContext';
import { ClassComponentProps } from '../utils/types';
/** @public @deprecated Use `CollapsiblePanelChangeHandler` */
type CollapsiblePanelRequestCloseHandler = (data: {
    event: React.MouseEvent<HTMLButtonElement>;
    panelId?: string | number;
    reason: 'toggleClick';
}) => void;
/** @public @deprecated Use `CollapsiblePanelChangeHandler` */
type CollapsiblePanelRequestOpenHandler = (data: {
    event: React.MouseEvent<HTMLButtonElement>;
    panelId?: string | number;
    reason: 'toggleClick';
}) => void;
/** @public */
type CollapsiblePanelChangeHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    action: 'open' | 'close';
    panelId?: string | number;
    reason: 'toggleClick';
}) => void;
interface CollapsiblePanelPropsBase {
    /**
     * Style object applied to `TransitionOpen` inner styles.
     */
    innerBodyStyles?: React.CSSProperties;
    children?: React.ReactNode;
    /**
     * Sets the initial state of a panel to expanded. Incompatible with
     * `open`. Use `open` or `defaultOpen`, not both. Incompatible with `SingleOpenPanelGroup`
     * and will be ignored for any children in `SingleOpenPanelGroup`.
     */
    defaultOpen?: boolean;
    /** Displays right-aligned text in the title bar of the `panel`. */
    description?: string;
    /**
     * Prevents the panel from expanding or collapsing.
     */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Sets the `aria-level` of a panel to make heading level fit the outline of the page.
     * If set, the heading element contains `role="heading"`.
     */
    headingLevel?: number;
    /**
     * If set to true, adds padding to panel content.
     */
    inset?: boolean;
    /**
     * Identifies a specific panel. Splunk UI uses `panelId` for callbacks
     and managing expanded and collapsed states.
     */
    panelId?: string | number;
    /**
     * @deprecated `onRequestClose` option has been marked for deprecation and will be removed in the next major version.
     * Use the `onChange` prop instead.
     */
    onRequestClose?: CollapsiblePanelRequestCloseHandler;
    /**
     * @deprecated `onRequestOpen` option has been marked for deprecation and will be removed in the next major version.
     * Use the `onChange` prop instead.
     */
    onRequestOpen?: CollapsiblePanelRequestOpenHandler;
    /**
     * Invoked on a change of the open panel.
     * Callback is passed the `panelId` of the `CollapsiblePanel` that originated the expand request and the `action` ("open" or "close")
     */
    onChange?: CollapsiblePanelChangeHandler;
    /**
     * Controls the expanded state of a panel. Incompatible with
     * `defaultOpen`. Use `open` or `defaultOpen`, not both. Incompatible with `SingleOpenPanelGroup`
     * and will be ignored for any children in `SingleOpenPanelGroup`.
     */
    open?: boolean;
    /**
     * Controls how panel overflow is handled. Default is `auto`, allowing
     * fixed-height Accordions to scroll their content if the panel is too
     * high to fit properly. Any value allowed by the CSS `overflow` property
     * is permitted, as is `null` (which will use the CSS default of "visible").
     */
    overflow?: string;
    /**
     * When true, children are always rendered whether collapsed or not.
     * Setting this to `true` can improve the performance of expanding panels at the cost of initial loading performance.
     */
    renderChildrenWhenCollapsed?: boolean;
    /**
     * Displays the name of the panel in its title bar.
     */
    title: React.ReactNode;
    /**
     * Renders toggle button separate from `title`, allowing `title` to contain interactive elements.
     */
    titleWithActions?: boolean;
}
interface CollapsiblePanelDeprecatedControlledProps extends CollapsiblePanelPropsBase {
    defaultOpen?: never;
    onRequestOpen?: CollapsiblePanelRequestOpenHandler;
    onRequestClose?: CollapsiblePanelRequestCloseHandler;
    onChange?: never;
    open?: boolean;
}
interface CollapsiblePanelControlledProps extends CollapsiblePanelPropsBase {
    defaultOpen?: never;
    onRequestOpen?: never;
    onRequestClose?: never;
    onChange: CollapsiblePanelChangeHandler;
    open?: boolean;
}
interface CollapsiblePanelUncontrolledProps extends CollapsiblePanelPropsBase {
    defaultOpen?: boolean;
    open?: never;
}
declare const defaultProps: Required<Pick<CollapsiblePanelPropsBase, 'disabled' | 'inset' | 'overflow' | 'renderChildrenWhenCollapsed' | 'titleWithActions'>>;
type CollapsiblePanelProps = ClassComponentProps<CollapsiblePanelDeprecatedControlledProps | CollapsiblePanelUncontrolledProps | CollapsiblePanelControlledProps, typeof defaultProps, 'div'>;
interface CollapsiblePanelState {
    animating: boolean;
    open?: boolean;
}
declare class CollapsiblePanel extends Component<CollapsiblePanelProps, CollapsiblePanelState> {
    private controlledExternally;
    private containerId;
    private toggleId;
    static propTypes: React.WeakValidationMap<CollapsiblePanelProps>;
    static defaultProps: Required<Pick<CollapsiblePanelPropsBase, "overflow" | "disabled" | "inset" | "renderChildrenWhenCollapsed" | "titleWithActions">>;
    context: React.ContextType<typeof SingleOpenPanelGroupContext>;
    static contextType: React.Context<SingleOpenPanelGroupContext>;
    constructor(props: Readonly<CollapsiblePanelProps>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: Readonly<CollapsiblePanelProps>): void;
    /**
     * SingleOpenPanelGroup already takes into account if it is controlled or not in determining openPanelId
     * so this.context.openPanelId is used for both the controlled and uncontrolled case.
     */
    private isOpen;
    private handleRequestClose;
    private handleRequestOpen;
    private handleChange;
    private handleAnimationEnd;
    private isControlled;
    render(): JSX.Element;
}
export default CollapsiblePanel;
export { SingleOpenPanelGroup };
export type { CollapsiblePanelRequestCloseHandler, CollapsiblePanelRequestOpenHandler, CollapsiblePanelChangeHandler, SingleOpenPanelGroupChangeHandler, };
