import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
type HeadingClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    index: number;
    panelId?: string;
    position: 'top' | 'inner' | 'bottom';
}) => void;
interface HeadingPropsBase {
    children: React.ReactNode;
    /** Text to place to the right of the title */
    description?: React.ReactNode;
    /** @private */
    index: number;
    /** @private */
    onClick?: HeadingClickHandler;
    /** @private */
    panelId?: string;
    /** @private */
    position?: 'top' | 'inner' | 'bottom';
    /** The panel can be in an warning, error or disabled state. */
    status?: 'normal' | 'warning' | 'error' | 'disabled';
}
declare const defaultProps: Required<Pick<HeadingPropsBase, 'position'>>;
type HeadingProps = ClassComponentProps<HeadingPropsBase, typeof defaultProps, 'button'>;
declare class Heading extends Component<HeadingProps, {}> {
    private container;
    static propTypes: React.WeakValidationMap<HeadingProps>;
    static defaultProps: Required<Pick<HeadingPropsBase, "position">>;
    private handleClick;
    private handleMount;
    focus(): void;
    render(): JSX.Element;
}
export default Heading;
export { HeadingClickHandler };
