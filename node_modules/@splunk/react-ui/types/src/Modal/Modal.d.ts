import React, { Component } from 'react';
import Body from './Body';
import Footer from './Footer';
import Header from './Header';
import { ClassComponentProps } from '../utils/types';
/** @public */
type ModalRequestCloseHandler = (data: {
    event: React.MouseEvent<HTMLDivElement> | MouseEvent | KeyboardEvent | TouchEvent;
    reason: 'clickAway' | 'escapeKey';
}) => void;
type ModalInitialFocus = 'first' | 'container' | (React.Component & {
    focus: () => void;
}) | HTMLElement | null;
interface ModalPropsBase {
    /**
     * Any renderable children can be passed to the `Modal`.
     *
     * To use the default Splunk UI `Modal` styles, use the
     * `Modal.Header`, `Modal.Body`, and `Modal.Footer`.
     */
    children?: React.ReactNode;
    /**
     * @private
     * Set to 'true' to enable closing the Modal by clicking outside of it.
     */
    closeOnClickAway?: boolean;
    /**
     * Show dividers between header, body and footer.
     */
    divider?: 'header' | 'footer' | 'both' | 'none';
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Allows focus to be set to a component other than the default.
     * Supports `first` (first focusable element in the modal), `container` (focus the modal itself), or a ref.
     */
    initialFocus?: ModalInitialFocus;
    /**
     * Called when a close event occurs. The callback is passed the event
     * and a reason, which is either 'escapeKey' or 'clickAway'.
     *
     * Generally, use this callback to toggle the `open` prop.
     */
    onRequestClose?: ModalRequestCloseHandler;
    /**
     * Set to `true` if the `Modal` is currently open. Otherwise, set to `false`.
     */
    open?: boolean;
    /**
     * Pass the ref of the invoking element (or other element that follows the logical flow of the application) to automatically move focus
     * to the invoking element on `Modal` close. If using a ref is not possible, you *must* pass a function that sets focus to the appropriate element.
     * This function will be called after `onRequestClose`.
     */
    returnFocus?: React.MutableRefObject<(React.Component & {
        focus: () => void;
    }) | HTMLElement | null> | (() => void);
}
declare const defaultProps: Required<Pick<ModalPropsBase, 'closeOnClickAway' | 'divider' | 'initialFocus' | 'open'>>;
type ModalProps = ClassComponentProps<ModalPropsBase, typeof defaultProps, 'div'>;
declare class Modal extends Component<ModalProps> {
    private el;
    private initialFocusTimeoutId;
    private initialFocus;
    private headerTitleId;
    private headerSubtitleId;
    static propTypes: React.WeakValidationMap<ModalProps>;
    static defaultProps: Required<Pick<ModalPropsBase, "open" | "divider" | "closeOnClickAway" | "initialFocus">>;
    static Header: typeof Header;
    static Body: typeof Body;
    static Footer: typeof Footer;
    constructor(props: Readonly<ModalProps>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: ModalProps): void;
    private getDefaultMotionStyle;
    private getMotionStyle;
    private handleFocus;
    private handleModalMount;
    private handleModalKeyDown;
    private handleRequestClose;
    private getProviderValue;
    private getModalStyles;
    private renderModal;
    render(): JSX.Element;
}
export default Modal;
export { Body, Header, Footer, ModalRequestCloseHandler };
