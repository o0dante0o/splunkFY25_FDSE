import React from 'react';
import PropTypes from 'prop-types';
import { TypographyTitleVariant } from '@splunk/themes/mixins';
import { ComponentProps } from '../utils/types';
interface HeadingPropsBase {
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLHeadingElement>;
    /**
     * Corresponds to the respective `<hX>` HTML tags and `typography(titleX)` `@splunk/themes` typography variant.
     * Styles will be set corresponding to level if variant is not provided: e.g. `level=3` will default to using `title3` from `mixins`.
     *
     * @deprecatedValue 's' and 'ss'
     * The `s` and `ss` values are deprecated and will be removed in a future major version.
     * See the migration guide for how to maintain the same styling as `level="s"` and `level="ss"`.
     */
    level?: 1 | 2 | 3 | 4 | 's' | 'ss' | 5 | 6;
    /**
     * Styles the component based on typography mixin title preset styles.
     * If a variant is not provided, styles will be set corresponding to level: e.g. `level=3` will default to using `title3` from `mixins`.
     */
    variant?: TypographyTitleVariant;
}
type HeadingProps = ComponentProps<HeadingPropsBase, 'h1'>;
declare const levelToElement: {
    readonly '1': "h1";
    readonly '2': "h2";
    readonly '3': "h3";
    readonly '4': "h4";
    readonly s: "h4";
    readonly ss: "h5";
    readonly '5': "h5";
    readonly '6': "h6";
};
declare function Heading({ children, elementRef, level, variant, ...otherProps }: HeadingProps): JSX.Element;
declare namespace Heading {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        elementRef: PropTypes.Requireable<object>;
        level: PropTypes.Requireable<string | number>;
        variant: PropTypes.Requireable<string>;
    };
}
export default Heading;
export { levelToElement };
