import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ClassComponentProps } from '../utils/types';
type ResultsMenuScrollBottomHandler = (event: React.UIEvent<HTMLDivElement> | null) => void;
type HandlerData = {
    itemRefs: React.RefObject<React.ReactNode>[];
    focusedItemKey: number;
};
type NavigationKeyPressHandler = (e: React.KeyboardEvent<HTMLDivElement>, data: HandlerData) => [React.RefObject<React.ReactNode> | number, boolean];
interface ResultsMenuPropsBase {
    /**
     * Whether or not to show the wait spinner when loading. It's recommended to set this to
     * `true` when loading may take more than one second.
     */
    animateLoading?: boolean;
    children?: React.ReactNode;
    /**
     * @private If set, the menu will never take focus and the active menu item will not have a focus-like appearance.
     */
    controlledExternally?: boolean;
    /**
     * `childrenStart` are nearest the toggle, so they are not necessarily on top.
     * This is extendable to add `childrenTop`, `childrenEnd`, and `childrenBottom` in the
     * future.
     */
    childrenStart?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Whether or not to show the loading message and/or wait spinner. It's not recommended to
     * pass old children when loading new children. The loading animation will show below any
     * children, so therefore it may be necessary to scroll to see the animation.
     */
    isLoading?: boolean;
    loadingMessage?: React.ReactNode;
    noOptionsMessage?: React.ReactNode;
    /** @private callback to override the default behavior when pressing the Down arrow/cursor key */
    onDownKeyPress?: NavigationKeyPressHandler;
    /** @private callback to override the default behavior when pressing the End key */
    onEndKeyPress?: NavigationKeyPressHandler;
    /** @private callback to override the default behavior when pressing the Home key */
    onHomeKeyPress?: NavigationKeyPressHandler;
    onScroll?: React.UIEventHandler<Element>;
    /**
     * A callback function for loading additional list items.
     * Called when the list is scrolled to the bottom or all items in the list are visible.
     * This is called with an event argument if this is the result of a scroll.
     *
     * This should be set this to `null` when all items are loaded.
     */
    onScrollBottom?: ResultsMenuScrollBottomHandler;
    /** @private callback to override the default behavior when pressing the Home key */
    onUpKeyPress?: NavigationKeyPressHandler;
    placement?: string;
    footerMessage?: React.ReactNode;
    menuId?: string;
}
declare const propTypes: {
    animateLoading: PropTypes.Requireable<boolean>;
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    /** @private */
    controlledExternally: PropTypes.Requireable<boolean>;
    childrenStart: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    elementRef: PropTypes.Requireable<object>;
    footerMessage: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    isLoading: PropTypes.Requireable<boolean>;
    loadingMessage: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    noOptionsMessage: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    /** @private */
    onDownKeyPress: PropTypes.Requireable<(...args: any[]) => any>;
    /** @private */
    onEndKeyPress: PropTypes.Requireable<(...args: any[]) => any>;
    /** @private */
    onHomeKeyPress: PropTypes.Requireable<(...args: any[]) => any>;
    onScroll: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollBottom: PropTypes.Requireable<(...args: any[]) => any>;
    /** @private */
    onUpKeyPress: PropTypes.Requireable<(...args: any[]) => any>;
    placement: PropTypes.Requireable<string>;
    menuId: PropTypes.Requireable<string>;
};
declare const defaultProps: Required<Pick<ResultsMenuPropsBase, 'animateLoading' | 'isLoading' | 'loadingMessage' | 'noOptionsMessage'>>;
type ResultsMenuProps = ClassComponentProps<ResultsMenuPropsBase, typeof defaultProps, 'div'>;
interface ResultsMenuState {
    childrenCount?: number;
    containerEl: HTMLDivElement | null;
    menuEl: HTMLDivElement | null;
    numberOfItemsLoaded: number;
    windowTop: number;
    scrollBottomTriggered: boolean;
}
declare class ResultsMenu extends Component<ResultsMenuProps, ResultsMenuState> {
    private scrollBottomOffset;
    private itemMinHeight;
    static propTypes: React.WeakValidationMap<ResultsMenuProps>;
    static defaultProps: Required<Pick<ResultsMenuPropsBase, "animateLoading" | "isLoading" | "loadingMessage" | "noOptionsMessage">>;
    constructor(props: Readonly<ResultsMenuProps>);
    componentDidUpdate(): void;
    private handleMenuMount;
    private handleMount;
    private handleMouseEnter;
    private handleMouseLeave;
    private handleScroll;
    private handleWheelMenu;
    private handleScrollBottomOnFullMenu;
    private handleScrollBottom;
    private checkFullHeight;
    private renderFooterMessage;
    render(): JSX.Element;
}
export default ResultsMenu;
export { propTypes };
export type { NavigationKeyPressHandler, ResultsMenuScrollBottomHandler, ResultsMenuPropsBase };
