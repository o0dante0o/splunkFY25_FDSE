import React, { Component } from 'react';
import FormRowsContext from './FormRowsContext';
type RowKeyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>, data: {
    index: number;
}) => void;
/** @public */
type RowRequestRemoveHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    index: number;
}) => void;
interface RowPropsBase {
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Index of the row. This is required if the rows are sortable. */
    index?: number;
    /** Callback when remove button is clicked. */
    onRequestRemove?: RowRequestRemoveHandler;
    /** The contents of Row */
    value?: React.ReactNode;
}
declare class Row extends Component<RowPropsBase, {}> {
    static propTypes: React.WeakValidationMap<RowPropsBase>;
    context: React.ContextType<typeof FormRowsContext>;
    static contextType: React.Context<FormRowsContext>;
    render(): JSX.Element;
}
export default Row;
export type { Row as RowWithoutSortable, RowKeyDownHandler, RowPropsBase, RowRequestRemoveHandler };
