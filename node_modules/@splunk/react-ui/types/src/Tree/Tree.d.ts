import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
import TreeItem from './TreeItem';
type RemoveNodeHandler = (id: string) => void;
type SetNodeHandler = (id: string, path?: string) => void;
interface TreePropsBase {
    /** Should contain TreeItems, can also include other elements to display in between tree items. */
    children?: React.ReactNode;
    /** Removes default indent from list styles if set to false. */
    defaultIndent?: boolean;
}
type TreeProps = ComponentProps<TreePropsBase, 'ul'>;
declare function Tree({ children, defaultIndent, ...otherProps }: TreeProps): JSX.Element;
declare namespace Tree {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        defaultIndent: PropTypes.Requireable<boolean>;
    };
    var TreeItem: typeof import("./TreeItem").default;
}
export default Tree;
export { TreeItem };
export { RemoveNodeHandler, SetNodeHandler };
