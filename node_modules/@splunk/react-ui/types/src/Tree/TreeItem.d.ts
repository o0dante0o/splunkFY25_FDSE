import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
interface TreeItemPropsBase {
    /** A unique `id` for this item and used by `Tree` to keep track of the focused item. */
    id: string;
    /** Should contain `TreeItems`, can also include other elements to display in between tree items. */
    children?: React.ReactNode;
    /** Content to show on the TreeItem. */
    content?: React.ReactNode;
    /** Custom indent to show before TreeItem content. */
    customIndent?: React.ReactNode;
    endAdornment?: React.ReactNode;
    labelledBy?: string;
    onFocus?: React.FocusEventHandler<HTMLLIElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLLIElement>;
    onToggle?: TreeItemToggleHandler;
    /** Default open state of the node. */
    open?: boolean;
    /** Toggle to pass that opens/closes the node on click. */
    toggle?: React.ReactElement;
}
type TreeItemProps = ComponentProps<TreeItemPropsBase, 'li'>;
type TreeItemClickHandler = (event: React.MouseEvent<HTMLSpanElement>, id: string) => void;
type TreeItemKeyDownHandler = (event: React.KeyboardEvent<HTMLLIElement>, id: string, showChildren: boolean | undefined, childrenCleaned: React.ReactElement[] | undefined | null, handleToggle: TreeItemToggleHandler) => void;
type TreeItemToggleHandler = (isOpen: boolean, event?: React.KeyboardEvent<HTMLLIElement> | React.MouseEvent<HTMLSpanElement>) => void;
declare function TreeItem({ id, children, content, customIndent, endAdornment, labelledBy, onFocus, onKeyDown, onToggle, open, toggle, ...otherProps }: TreeItemProps): JSX.Element;
declare namespace TreeItem {
    var propTypes: {
        id: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        content: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        customIndent: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        endAdornment: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        labelledBy: PropTypes.Requireable<string>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        onToggle: PropTypes.Requireable<(...args: any[]) => any>;
        open: PropTypes.Requireable<boolean>;
        toggle: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
}
export default TreeItem;
export { TreeItemClickHandler, TreeItemKeyDownHandler, TreeItemPropsBase, TreeItemToggleHandler };
