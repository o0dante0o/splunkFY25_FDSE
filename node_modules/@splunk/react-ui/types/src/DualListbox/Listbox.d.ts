import React from 'react';
import { ComponentProps } from '../utils/types';
type ListboxClickHandler = (event: React.MouseEvent<HTMLLIElement> | React.KeyboardEvent<HTMLUListElement>, data: {
    name: string;
    value: string;
}) => void;
type ListboxKeyDownHandler = (event: React.KeyboardEvent<HTMLUListElement>, data: {
    name: string;
}) => void;
type ListboxSelectAllClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    name: string;
    selected: true | false | 'some';
}) => void;
interface ListboxPropsBase {
    /**
     * All children must be instances of `DualListbox.Option`.
     */
    children?: React.ReactNode;
    /**
     * Ref callback.
     */
    elementRef?: React.Ref<HTMLUListElement>;
    /**
     * The list index, used in layout.
     */
    index: number;
    /**
     * Label text for the listbox.
     */
    label: string;
    /**
     * Name associated to the listbox. Used for event callbacks.
     */
    name: string;
    /**
     * Callback for click event.
     */
    onClick?: ListboxClickHandler;
    /**
     * Callback for keydown event.
     */
    onKeyDown?: ListboxKeyDownHandler;
    /**
     * Callback for associated "select-all" switch.
     */
    onSelectAllClick?: ListboxSelectAllClickHandler;
}
type ListboxProps = ComponentProps<ListboxPropsBase, 'ul'>;
declare function Listbox({ children, elementRef, index, label, name, onClick, onKeyDown, onSelectAllClick, ...otherProps }: ListboxProps): JSX.Element;
declare namespace Listbox {
    var propTypes: React.WeakValidationMap<ListboxPropsBase>;
}
export default Listbox;
export { ListboxClickHandler, ListboxKeyDownHandler, ListboxSelectAllClickHandler };
