import React from 'react';
import Option from './Option';
import { ComponentProps } from '../utils/types';
/** @public */
type DualListboxSelectHandler = (event: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLLIElement> | React.KeyboardEvent<HTMLUListElement>, data: {
    /**
     * The list `name` associated to the batch action.
     */
    listName: string;
    /**
     * The values marked as selected with the given list.
     */
    values: string[];
}) => void;
/** @public */
type DualListboxChangeHandler = (event: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLLIElement> | React.KeyboardEvent<HTMLUListElement>, data: {
    /**
     * The values being changed.
     */
    affectedValues: string[];
    /**
     * The a11y text describing the move action.
     * If `controlled="true"` the presentation of the text MUST be implemented by the consumer.
     */
    screenReaderMessage: string;
    /**
     * The list `name` associated to the source of the move action.
     */
    sourceListName: string;
    /**
     * The values now contained within the source list.
     */
    sourceValues: string[];
    /**
     * The list `name` associated to the target of the move action.
     */
    targetListName: string;
    /**
     * The values now contained within the target list.
     */
    targetValues: string[];
}) => void;
type ListboxConfig = {
    name: string;
    label: string;
};
interface DualListboxPropsBase {
    /**
     * All children must be instances of `DualListbox.Option`.
     */
    children?: React.ReactNode;
    /**
     * When true, `Options`'s `listName` and `selected` state props are fully controlled.
     */
    controlled?: boolean;
    /**
     * When true, fill height and width of the relative parent container.
     */
    fill?: boolean;
    /**
     * When false, display as inline-block with the default width.
     * Ignored if `fill=true` set.
     */
    inline?: boolean;
    /**
     * List identifiers.
     * `name` should map to child `Option`s `listName` prop, and will be returned with event calls.
     * `label` will be used for visual and assistive text.
     */
    lists: ListboxConfig[];
    /**
     * Callback for selected options moving from one list to another.
     */
    onChange?: DualListboxChangeHandler;
    /**
     * Callback for single selected/de-select actions.
     */
    onSelect?: DualListboxSelectHandler;
}
type DualListboxProps = ComponentProps<DualListboxPropsBase, 'div'>;
declare function DualListbox({ children, controlled, fill, inline, onChange, onSelect, lists, ...otherProps }: DualListboxProps): JSX.Element;
declare namespace DualListbox {
    var propTypes: React.WeakValidationMap<DualListboxPropsBase>;
    var Option: typeof import("./Option").default;
}
export default DualListbox;
export { DualListboxChangeHandler, DualListboxSelectHandler, DualListboxProps, DualListboxPropsBase, Option, };
