import React from 'react';
export type UpdateCallbackHandler = (callback?: React.DispatchWithoutAction) => void;
export type UpdateNameCallbackHandler = (name: string, callback?: React.DispatchWithoutAction) => void;
export type UpdateValueCallbackHandler = (value: string, callback?: React.DispatchWithoutAction) => void;
export type GetActiveValueHandler = (name: string) => string | undefined;
export type GetCountHandler = (name: string) => number;
export type GetScreenReaderMessageHandler = () => string | undefined;
export type GetSelectedStateHandler = (value: string) => boolean;
export interface DualListboxContextValue {
    controlled?: boolean;
    getActiveValue?: GetActiveValueHandler;
    getScreenReaderMessage?: GetScreenReaderMessageHandler;
    getSelectedStateForValue?: GetSelectedStateHandler;
    getSelectedValueCount?: GetCountHandler;
    getValueCount?: GetCountHandler;
    updateLabelRefreshHookByName?: UpdateNameCallbackHandler;
    updateOptionRefreshHookByValue?: UpdateValueCallbackHandler;
    updateScreenReaderRefreshHook?: UpdateCallbackHandler;
}
/**
 * A React context used to inform subcomponets of DualListbox of parent component values.
 * The context interface is `DualListboxContextValue`.
 * Defaults to `'{}'`.
 * @public
 */
declare const DualListboxContext: React.Context<DualListboxContextValue>;
export default DualListboxContext;
