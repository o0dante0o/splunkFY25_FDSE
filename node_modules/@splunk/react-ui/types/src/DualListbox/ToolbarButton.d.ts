import React from 'react';
import { ComponentProps } from '../utils/types';
type ButtonClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    name: string;
}) => void;
interface ToolbarButtonPropsBase {
    /**
     * Assitive text. Ideally should contain `tooltipLabel` as root of text.
     */
    ariaLabel: string;
    /**
     * Assitive value. aria shortcut key associated to the listbox actions.
     */
    ariaKeyShortcuts?: string;
    /**
     * Icon for the button.
     */
    icon: React.ReactNode;
    /**
     * Associated name for callbacks.
     */
    name: string;
    /**
     * Visible tooltip text. Ideally a short message.
     */
    tooltipLabel: string;
    /**
     * Default tooltipPlacement. Value should be opposite of action direction: e.g. place the tooltip to the left of the action that moves items to the right.
     */
    tooltipPlacement: 'above' | 'below' | 'left' | 'right';
}
type ToolbarButtonProps = ComponentProps<ToolbarButtonPropsBase, 'button'>;
declare function ToolbarButton({ ariaLabel, ariaKeyShortcuts, icon, name, tooltipLabel, tooltipPlacement, ...otherProps }: ToolbarButtonProps): JSX.Element | null;
declare namespace ToolbarButton {
    var propsTypes: React.WeakValidationMap<ToolbarButtonProps>;
}
export default ToolbarButton;
export { ButtonClickHandler };
