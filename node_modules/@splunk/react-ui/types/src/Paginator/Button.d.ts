import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
type PaginatorButtonClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    page?: number;
}) => void;
interface PaginatorButtonPropsBase {
    children?: React.ReactNode;
    /** Prevents user from clicking the button. If set to `dimmed`, the button
     * does not respond to mouse events but can still receive focus, and
     * `aria-disabled` is set to `true`. */
    disabled?: boolean | 'dimmed';
    /** Callback for button click event */
    onClick?: PaginatorButtonClickHandler;
    /** Index of page */
    page?: number;
    /** @private */
    selected?: boolean;
}
type PaginatorButtonProps = ComponentProps<PaginatorButtonPropsBase, 'button'>;
declare function PaginatorButton({ children, disabled, onClick, page, selected, ...otherProps }: PaginatorButtonProps): JSX.Element;
declare namespace PaginatorButton {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        disabled: PropTypes.Requireable<NonNullable<string | boolean | null | undefined>>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        page: PropTypes.Requireable<number>;
        /** @private */
        selected: PropTypes.Requireable<boolean>;
    };
}
export default PaginatorButton;
export { PaginatorButtonClickHandler };
