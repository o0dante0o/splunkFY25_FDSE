import React from 'react';
import PropTypes from 'prop-types';
import Compact, { PaginatorCompactChangeHandler } from './Compact';
import PageControl, { PaginatorPageControlChangeHandler } from './PageControl';
import { ComponentProps } from '../utils/types';
/** @public */
type PaginatorChangeHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    page: number;
}) => void;
interface PaginatorPropsBase {
    /** Displays a link to the last page in a collection. */
    alwaysShowLastPageLink?: boolean;
    /** Currently selected page. */
    current?: number;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLElement>;
    /**
     * Number of pages to display. If greater than `totalPages`, `totalPages` is used instead.
     */
    numPageLinks?: number;
    /** Callback to handle page change. */
    onChange?: PaginatorChangeHandler;
    /** The total number of pages. */
    totalPages: number;
}
type PaginatorProps = ComponentProps<PaginatorPropsBase, 'nav'>;
declare function Paginator({ onChange, current, alwaysShowLastPageLink, numPageLinks, totalPages, ...otherProps }: PaginatorProps): JSX.Element | null;
declare namespace Paginator {
    var Compact: typeof import("./Compact").default;
    var PageControl: typeof import("./PageControl").default;
    var propTypes: {
        alwaysShowLastPageLink: PropTypes.Requireable<boolean>;
        current: PropTypes.Requireable<number>;
        elementRef: PropTypes.Requireable<object>;
        numPageLinks: PropTypes.Requireable<number>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        totalPages: PropTypes.Requireable<number>;
    };
}
export default Paginator;
export { Compact, PageControl };
export type { PaginatorCompactChangeHandler, PaginatorChangeHandler, PaginatorPageControlChangeHandler, };
