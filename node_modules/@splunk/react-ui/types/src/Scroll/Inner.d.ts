import React, { Component } from 'react';
import { SpringValue } from 'react-spring';
import { ClassComponentProps } from '../utils/types';
interface InnerPropsBase {
    children?: React.ReactNode;
    /** The scrollLeft to set on Mount. */
    defaultLeft?: number;
    /** The scrollTop to set on Mount. */
    defaultTop?: number;
    elementRef?: React.Ref<Element>;
    /** If set, scroll to this position on update. If null, ignore. */
    left?: SpringValue<number>;
    /** Prevent mouseWheel events from scrolling the page or other containers. */
    stopScrollPropagation?: boolean | 'window';
    /** A callback for when the scroll position changes. */
    onScroll?: React.UIEventHandler<Element>;
    tagName?: keyof JSX.IntrinsicElements;
    /** If set, scroll to this position on update. If null, ignore. */
    top?: SpringValue<number>;
}
declare const defaultProps: Required<Pick<InnerPropsBase, 'defaultLeft' | 'defaultTop' | 'tagName'>>;
type InnerProps = ClassComponentProps<InnerPropsBase, typeof defaultProps, keyof JSX.IntrinsicElements>;
interface InnerState {
    containerEl: HTMLElement | null;
}
declare class Inner extends Component<InnerProps, InnerState> {
    private defaultWindowOverflowX;
    private defaultWindowOverflowY;
    static propTypes: React.WeakValidationMap<InnerProps>;
    static defaultProps: Required<Pick<InnerPropsBase, "tagName" | "defaultLeft" | "defaultTop">>;
    constructor(props: Readonly<InnerProps>);
    componentDidUpdate(prevProps: Readonly<InnerProps>, prevState: Readonly<InnerState>): void;
    private handleWheel;
    private handleMount;
    private handleMouseEnter;
    private handleMouseLeave;
    render(): JSX.Element;
}
export default Inner;
