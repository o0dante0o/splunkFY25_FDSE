/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var e = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/compat get default export */
    /******/    (() => {
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ e.n = t => {
            /******/ var n = t && t.__esModule ? 
            /******/ () => t["default"]
            /******/ : () => t
            /******/;
            e.d(n, {
                a: n
            });
            /******/            return n;
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/define property getters */
    /******/    (() => {
        /******/ // define getter functions for harmony exports
        /******/ e.d = (t, n) => {
            /******/ for (var r in n) {
                /******/ if (e.o(n, r) && !e.o(t, r)) {
                    /******/ Object.defineProperty(t, r, {
                        enumerable: true,
                        get: n[r]
                    });
                    /******/                }
                /******/            }
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/    (() => {
        /******/ e.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)
        /******/;
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/    (() => {
        /******/ // define __esModule on exports
        /******/ e.r = e => {
            /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                /******/ Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module"
                });
                /******/            }
            /******/            Object.defineProperty(e, "__esModule", {
                value: true
            });
            /******/        };
        /******/    })();
    /******/
    /************************************************************************/    var t = {};
    // ESM COMPAT FLAG
        e.r(t);
    // EXPORTS
        e.d(t, {
        Panel: () => /* reexport */ W,
        default: () => /* reexport */ ie
    });
    // CONCATENATED MODULE: external "react"
    const n = require("react");
    var r =  e.n(n);
    // CONCATENATED MODULE: external "prop-types"
    const o = require("prop-types");
    var i =  e.n(o);
    // CONCATENATED MODULE: external "lodash/filter"
    const a = require("lodash/filter");
    var l =  e.n(a);
    // CONCATENATED MODULE: external "lodash/keys"
    const u = require("lodash/keys");
    var c =  e.n(u);
    // CONCATENATED MODULE: external "lodash/omit"
    const s = require("lodash/omit");
    var f =  e.n(s);
    // CONCATENATED MODULE: external "lodash/values"
    const p = require("lodash/values");
    var d =  e.n(p);
    // CONCATENATED MODULE: external "react-spring"
    const y = require("react-spring");
    // CONCATENATED MODULE: external "@splunk/react-ui/Animation"
    const v = require("@splunk/react-ui/Animation");
    // CONCATENATED MODULE: external "styled-components"
    const m = require("styled-components");
    var h =  e.n(m);
    // CONCATENATED MODULE: external "@splunk/react-ui/Box"
    const b = require("@splunk/react-ui/Box");
    var g =  e.n(b);
    // CONCATENATED MODULE: external "@splunk/themes"
    const O = require("@splunk/themes");
    // CONCATENATED MODULE: ./src/SlidingPanels/SlidingPanelsStyles.ts
    var P = h()((0, y.animated)(g())).withConfig({
        displayName: "SlidingPanelsStyles__StyledBox",
        componentId: "su6isq-0"
    })([ "overflow:hidden;position:relative;" ]);
    var w = h()(y.animated.div).withConfig({
        displayName: "SlidingPanelsStyles__Styled",
        componentId: "su6isq-1"
    })([ "", ";", ";" ], O.mixins.reset("block"), O.mixins.clearfix());
    // CONCATENATED MODULE: ./src/utils/updateReactRef.ts
    /**
 * Updates a React ref. Callback refs and object refs (from `createRef` and `useRef`) are supported.
 *
 * @param ref - The React callback or object ref. Can be `null` or `undefined`.
 * @param current - The new value of the ref.
 */
    function j(e, t) {
        if (e) {
            if (typeof e === "function") {
                e(t);
            } else {
                // the public signature of this util uses React.Ref<T> to mirror the way React types refs.
                // the intention here is to signal "we will take care of setting 'current', not you".
                e.current = t;
 // eslint-disable-line no-param-reassign
                        }
        }
    }
    // CONCATENATED MODULE: ./src/SlidingPanels/Panel.tsx
    function S(e) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            S = function e(t) {
                return typeof t;
            };
        } else {
            S = function e(t) {
                return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            };
        }
        return S(e);
    }
    function I() {
        I = Object.assign || function(e) {
            for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var r in n) {
                    if (Object.prototype.hasOwnProperty.call(n, r)) {
                        e[r] = n[r];
                    }
                }
            }
            return e;
        };
        return I.apply(this, arguments);
    }
    function _(e, t) {
        if (!(e instanceof t)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function E(e, t) {
        for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.enumerable = r.enumerable || false;
            r.configurable = true;
            if ("value" in r) r.writable = true;
            Object.defineProperty(e, r.key, r);
        }
    }
    function R(e, t, n) {
        if (t) E(e.prototype, t);
        if (n) E(e, n);
        return e;
    }
    function k(e, t) {
        if (typeof t !== "function" && t !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                writable: true,
                configurable: true
            }
        });
        if (t) q(e, t);
    }
    function q(e, t) {
        q = Object.setPrototypeOf || function e(t, n) {
            t.__proto__ = n;
            return t;
        };
        return q(e, t);
    }
    function A(e) {
        var t = x();
        return function n() {
            var r = M(e), o;
            if (t) {
                var i = M(this).constructor;
                o = Reflect.construct(r, arguments, i);
            } else {
                o = r.apply(this, arguments);
            }
            return C(this, o);
        };
    }
    function C(e, t) {
        if (t && (S(t) === "object" || typeof t === "function")) {
            return t;
        }
        return T(e);
    }
    function T(e) {
        if (e === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return e;
    }
    function x() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(Reflect.construct(Date, [], (function() {})));
            return true;
        } catch (e) {
            return false;
        }
    }
    function M(e) {
        M = Object.setPrototypeOf ? Object.getPrototypeOf : function e(t) {
            return t.__proto__ || Object.getPrototypeOf(t);
        };
        return M(e);
    }
    function D(e, t, n) {
        if (t in e) {
            Object.defineProperty(e, t, {
                value: n,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            e[t] = n;
        }
        return e;
    }
    var U = {
        elementRef: i().oneOfType([ i().func, i().object ]),
        panelId: i().any.isRequired,
        /**
   * @private.
   * Used internally, func passed in from outer place is overwritten
   * by SlidingPanels during rendering
   */
        onMount: i().func,
        /**
   * @private.
   * Used internally, func passed in from outer place is overwritten
   * by SlidingPanels during rendering
   */
        onUnmount: i().func
    };
    var N = {};
    /**
 * Container for arbitrary content.
 */    var L =  function(e) {
        k(n, e);
        var t = A(n);
        function n() {
            var e;
            _(this, n);
            for (var r = arguments.length, o = new Array(r), i = 0; i < r; i++) {
                o[i] = arguments[i];
            }
            e = t.call.apply(t, [ this ].concat(o));
            D(T(e), "el", null);
            D(T(e), "handleMount", (function(t) {
                e.el = t;
                j(e.props.elementRef, t);
            }));
            return e;
        }
        R(n, [ {
            key: "componentDidMount",
            value: function e() {
                var t, n;
                (t = (n = this.props).onMount) === null || t === void 0 ? void 0 : t.call(n, this);
            }
        }, {
            key: "componentWillUnmount",
            value: function e() {
                var t, n;
                (t = (n = this.props).onUnmount) === null || t === void 0 ? void 0 : t.call(n, this);
            }
        }, {
            key: "getHeight",
            value: function e() {
                var t;
                return (t = this.el) === null || t === void 0 ? void 0 : t.clientHeight;
            }
        }, {
            key: "getWidth",
            value: function e() {
                var t;
                return (t = this.el) === null || t === void 0 ? void 0 : t.clientWidth;
            }
        }, {
            key: "render",
            value: function e() {
                var t = this.props.panelId;
                
                return r().createElement(w, I({
                    "data-test": "panel",
                    "data-test-panel-id": t
                }, f()(this.props, c()(n.propTypes)), {
                    ref: this.handleMount
                }));
            }
        } ]);
        return n;
    }(n.Component);
    D(L, "propTypes", U);
    D(L, "defaultProps", N);
    /* harmony default export */    const W = L;
    // CONCATENATED MODULE: ./src/SlidingPanels/SlidingPanels.tsx
    function X(e) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            X = function e(t) {
                return typeof t;
            };
        } else {
            X = function e(t) {
                return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            };
        }
        return X(e);
    }
    function H() {
        H = Object.assign || function(e) {
            for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var r in n) {
                    if (Object.prototype.hasOwnProperty.call(n, r)) {
                        e[r] = n[r];
                    }
                }
            }
            return e;
        };
        return H.apply(this, arguments);
    }
    function B(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
            var r = Object.getOwnPropertySymbols(e);
            if (t) r = r.filter((function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }));
            n.push.apply(n, r);
        }
        return n;
    }
    function V(e) {
        for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t] != null ? arguments[t] : {};
            if (t % 2) {
                B(Object(n), true).forEach((function(t) {
                    te(e, t, n[t]);
                }));
            } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(e, Object.getOwnPropertyDescriptors(n));
            } else {
                B(Object(n)).forEach((function(t) {
                    Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
                }));
            }
        }
        return e;
    }
    function F(e, t) {
        if (!(e instanceof t)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function z(e, t) {
        for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.enumerable = r.enumerable || false;
            r.configurable = true;
            if ("value" in r) r.writable = true;
            Object.defineProperty(e, r.key, r);
        }
    }
    function G(e, t, n) {
        if (t) z(e.prototype, t);
        if (n) z(e, n);
        return e;
    }
    function J(e, t) {
        if (typeof t !== "function" && t !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                writable: true,
                configurable: true
            }
        });
        if (t) K(e, t);
    }
    function K(e, t) {
        K = Object.setPrototypeOf || function e(t, n) {
            t.__proto__ = n;
            return t;
        };
        return K(e, t);
    }
    function Q(e) {
        var t = $();
        return function n() {
            var r = ee(e), o;
            if (t) {
                var i = ee(this).constructor;
                o = Reflect.construct(r, arguments, i);
            } else {
                o = r.apply(this, arguments);
            }
            return Y(this, o);
        };
    }
    function Y(e, t) {
        if (t && (X(t) === "object" || typeof t === "function")) {
            return t;
        }
        return Z(e);
    }
    function Z(e) {
        if (e === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return e;
    }
    function $() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(Reflect.construct(Date, [], (function() {})));
            return true;
        } catch (e) {
            return false;
        }
    }
    function ee(e) {
        ee = Object.setPrototypeOf ? Object.getPrototypeOf : function e(t) {
            return t.__proto__ || Object.getPrototypeOf(t);
        };
        return ee(e);
    }
    function te(e, t, n) {
        if (t in e) {
            Object.defineProperty(e, t, {
                value: n,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            e[t] = n;
        }
        return e;
    }
    var ne = {
        activePanelId: i().any.isRequired,
        children: i().node,
        elementRef: i().oneOfType([ i().func, i().object ]),
        innerClassName: i().string,
        innerStyle: i().object,
        onAnimationEnd: i().func,
        outerClassName: i().string,
        outerStyle: i().object,
        transition: i().oneOf([ "forward", "backward" ])
    };
    var re = {
        transition: "forward"
    };
    var oe =  function(e) {
        J(o, e);
        var t = Q(o);
        // @docs-props-type SlidingPanelsPropsBase
                function o(e) {
            var i;
            F(this, o);
            i = t.call(this, e);
            te(Z(i), "panelInstances", {});
            te(Z(i), "allowAnimationUpdates", true);
            te(Z(i), "willEnter", (function() {
                return {
                    translateX: 0
                };
            }));
            te(Z(i), "willLeave", (function(e) {
                return e ? {
                    translateX: -1,
                    position: "absolute",
                    left: 0,
                    top: 0
                } : {
                    translateX: -1
                };
            }));
            te(Z(i), "handlePanelMount", (function(e) {
                i.panelInstances[e.props.panelId] = e;
                if (e.props.panelId === i.props.activePanelId) {
                    i.setState({
                        activePanel: e,
                        panelLoading: false
                    });
                }
            }));
            te(Z(i), "handlePanelUnmount", (function(e) {
                delete i.panelInstances[e.props.panelId];
            }));
            te(Z(i), "handleAnimationEnd", (function() {
                var e, t;
                if (i.allowAnimationUpdates) {
                    i.setState({
                        animating: false
                    });
                }
                (e = (t = i.props).onAnimationEnd) === null || e === void 0 ? void 0 : e.call(t);
            }));
            te(Z(i), "renderPanel", (function(e, t, o) {
                var a;
                var l = i.props, u = l.children, c = l.transition;
                var s = n.Children.toArray(u).filter(n.isValidElement).find((function(e) {
                    return e.props.panelId === t;
                }));
 // TODO: Fix Interplation<string | number> can't be cast to string
                                var f = (a = e.translateX) === null || a === void 0 ? void 0 : a.to((function(e) {
                    return "translateX(".concat(e * o * (c === "forward" ? 1 : -1), "px)");
                }));
                var p = s ?  r().createElement(y.animated.div, {
                    style: e
                },  (0, n.cloneElement)(s, {
                    style: V(V({}, s.props.style), {}, {
                        transform: f
                    }),
                    onMount: i.handlePanelMount,
                    onUnmount: i.handlePanelUnmount
                })) : null;
                return p;
            }));
            te(Z(i), "renderOuterContainer", (function(e) {
                var t = i.props, a = t.activePanelId, u = t.children, s = t.elementRef, p = t.outerClassName, m = t.outerStyle, h = t.innerClassName, b = t.innerStyle;
                var g = i.state.animating;
                var O = V(V({}, m), g ? {
                    width: e.width,
                    height: e.height
                } : {});
                var w = n.Children.toArray(u).filter(n.isValidElement).find((function(e) {
                    return e.props.panelId === a;
                }));
                if (false) {}
                var j = g ? {
                    translateX: 1
                } : {};
                var S = l()(d()(i.panelInstances), (function(e) {
                    return !!e;
                }));
                var I = S.map((function(e) {
                    var t;
                    var n = i.panelInstances[e.props.panelId];
                    return n ? (t = n.getWidth()) !== null && t !== void 0 ? t : 0 : 0;
                })).reduce((function(e, t) {
                    return Math.max(e, t);
                }), 0);
                
                return r().createElement(P, H({
                    className: p,
                    "data-test-active-panel-id": a,
                    "data-test": "sliding-panels",
                    elementRef: s,
                    style: O
                }, f()(i.props, c()(o.propTypes))),  r().createElement(v.Transition, {
                    from: j,
                    enter: i.willEnter(),
                    leave: i.willLeave(g),
                    items: a
                }, (// eslint-disable-next-line @typescript-eslint/no-explicit-any
                function(e, t) {
                    
                    return r().createElement(y.animated.div, {
                        style: b,
                        className: h
                    }, i.renderPanel(e, t, I));
                })));
            }));
            i.state = {
                animating: false,
                panelLoading: false,
                prevActivePanelId: i.props.activePanelId,
                // eslint-disable-line react/no-unused-state
                slidingId: 0
            };
            return i;
        }
        G(o, [ {
            key: "componentWillUnmount",
            value: function e() {
                this.allowAnimationUpdates = false;
            }
        }, {
            key: "render",
            value: function e() {
                var t = this.state, n = t.activePanel, o = t.panelLoading;
                var i = n ? n.getWidth() : 0;
                var a = n ? n.getHeight() : 0;
 // When a new panel is loading, the activePanel is about to be removed. The height and/or
                // width of that panel may have changed since the last render. To ensure that the next
                // panel animates from the current height and width (rather than the previously loaded one),
                // we only set the style when panelLoading is true (immediate prop prevents animation if true).
                                var l = {
                    width: i,
                    height: a
                };
                
                return r().createElement(v.Spring, {
                    to: l,
                    onRest: this.handleAnimationEnd,
                    immediate: o,
                    config: {
                        precision: 1
                    }
                }, 
                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                this.renderOuterContainer);
            }
        } ]);
        return o;
    }(n.Component);
    te(oe, "propTypes", ne);
    te(oe, "defaultProps", re);
    te(oe, "Panel", W);
    te(oe, "getDerivedStateFromProps", (function(e, t) {
        if (e.activePanelId !== t.prevActivePanelId) {
            // instead of using panelId, assign each sliding event an id and
            // use it as the key to make sure new panelA will transit as expected if
            // old panelA has not fully left yet
            return {
                animating: true,
                panelLoading: true,
                prevActivePanelId: e.activePanelId,
                slidingId: t.slidingId + 1
            };
        }
 // Return null to indicate no change to state
                return null;
    }));
    /* harmony default export */    const ie = oe;
    // CONCATENATED MODULE: ./src/SlidingPanels/index.ts
    module.exports = t;
    /******/})();