/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var e = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/compat get default export */
    /******/    (() => {
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ e.n = t => {
            /******/ var n = t && t.__esModule ? 
            /******/ () => t["default"]
            /******/ : () => t
            /******/;
            e.d(n, {
                a: n
            });
            /******/            return n;
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/define property getters */
    /******/    (() => {
        /******/ // define getter functions for harmony exports
        /******/ e.d = (t, n) => {
            /******/ for (var r in n) {
                /******/ if (e.o(n, r) && !e.o(t, r)) {
                    /******/ Object.defineProperty(t, r, {
                        enumerable: true,
                        get: n[r]
                    });
                    /******/                }
                /******/            }
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/    (() => {
        /******/ e.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)
        /******/;
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/    (() => {
        /******/ // define __esModule on exports
        /******/ e.r = e => {
            /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                /******/ Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module"
                });
                /******/            }
            /******/            Object.defineProperty(e, "__esModule", {
                value: true
            });
            /******/        };
        /******/    })();
    /******/
    /************************************************************************/    var t = {};
    // ESM COMPAT FLAG
        e.r(t);
    // EXPORTS
        e.d(t, {
        NavigationContext: () => /* reexport */ h,
        NavigationProvider: () => /* reexport */ m,
        default: () => /* reexport */ F,
        isInternalLink: () => /* reexport */ z,
        isRootRelativeLink: () => /* reexport */ D
    });
    // CONCATENATED MODULE: external "react"
    const n = require("react");
    var r =  e.n(n);
    // CONCATENATED MODULE: external "prop-types"
    const o = require("prop-types");
    var i =  e.n(o);
    // CONCATENATED MODULE: external "lodash/has"
    const l = require("lodash/has");
    // CONCATENATED MODULE: external "lodash/isString"
    const a = require("lodash/isString");
    var u =  e.n(a);
    // CONCATENATED MODULE: external "lodash/omit"
    const c = require("lodash/omit");
    var f =  e.n(c);
    // CONCATENATED MODULE: external "@splunk/react-ui/Dropdown"
    const s = require("@splunk/react-ui/Dropdown");
    // CONCATENATED MODULE: external "styled-components"
    const p = require("styled-components");
    var d =  e.n(p);
    // CONCATENATED MODULE: external "@splunk/themes"
    const b = require("@splunk/themes");
    // CONCATENATED MODULE: ./src/Clickable/ClickableStyles.ts
    var v = d().a.withConfig({
        displayName: "ClickableStyles__StyledA",
        componentId: "sc-7al1vw-0"
    })([ "", " cursor:pointer;&[disabled],&[aria-disabled='true']{color:", ";}&::-moz-focus-inner{border:0;padding:0;}" ], b.mixins.reset("inline"), b.variables.contentColorDisabled);
    // CONCATENATED MODULE: ./src/Clickable/NavigationProvider.tsx
    /** @public */
    var y = {
        children: i().node,
        onClick: i().func,
        onLinkClick: i().func,
        prefix: i().string,
        transformUrl: i().func
    };
    var h =  r().createContext({});
    /**
 * Used to provide an override for the `onClick` for links for single page applications so that
 * internal links can navigate without a page reload.
 */    function m(e) {
        var t = e.children, o = e.onClick, i = e.onLinkClick, l = e.prefix, a = e.transformUrl;
        // @docs-props-type NavigationProviderProps
                var u = (0, n.useMemo)((function() {
            var e;
            if (a != null) {
                if (false) {}
                e = a;
            } else if (l != null) {
                if (false) {}
                e = function e() {
                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                    var n = arguments.length > 1 ? arguments[1] : undefined, r = n.isInternal, o = n.isRootRelative;
                    return l != null && r && o ? "".concat(l).concat(t) : t;
                };
            }
            return {
                onClick: o,
                onLinkClick: i,
                transformUrl: e
            };
        }), [ o, i, l, a ]);
        
        return r().createElement(h.Provider, {
            value: u
        }, t);
    }
    m.propTypes = y;
    // CONCATENATED MODULE: ./src/utils/updateReactRef.ts
    /**
 * Updates a React ref. Callback refs and object refs (from `createRef` and `useRef`) are supported.
 *
 * @param ref - The React callback or object ref. Can be `null` or `undefined`.
 * @param current - The new value of the ref.
 */
    function k(e, t) {
        if (e) {
            if (typeof e === "function") {
                e(t);
            } else {
                // the public signature of this util uses React.Ref<T> to mirror the way React types refs.
                // the intention here is to signal "we will take care of setting 'current', not you".
                e.current = t;
 // eslint-disable-line no-param-reassign
                        }
        }
    }
    // CONCATENATED MODULE: ./src/Clickable/Clickable.tsx
    function g(e) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            g = function e(t) {
                return typeof t;
            };
        } else {
            g = function e(t) {
                return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            };
        }
        return g(e);
    }
    function C() {
        C = Object.assign || function(e) {
            for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var r in n) {
                    if (Object.prototype.hasOwnProperty.call(n, r)) {
                        e[r] = n[r];
                    }
                }
            }
            return e;
        };
        return C.apply(this, arguments);
    }
    function O(e, t) {
        if (e == null) return {};
        var n = w(e, t);
        var r, o;
        if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(e);
            for (o = 0; o < i.length; o++) {
                r = i[o];
                if (t.indexOf(r) >= 0) continue;
                if (!Object.prototype.propertyIsEnumerable.call(e, r)) continue;
                n[r] = e[r];
            }
        }
        return n;
    }
    function w(e, t) {
        if (e == null) return {};
        var n = {};
        var r = Object.keys(e);
        var o, i;
        for (i = 0; i < r.length; i++) {
            o = r[i];
            if (t.indexOf(o) >= 0) continue;
            n[o] = e[o];
        }
        return n;
    }
    function x(e, t) {
        if (!(e instanceof t)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function j(e, t) {
        for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.enumerable = r.enumerable || false;
            r.configurable = true;
            if ("value" in r) r.writable = true;
            Object.defineProperty(e, r.key, r);
        }
    }
    function R(e, t, n) {
        if (t) j(e.prototype, t);
        if (n) j(e, n);
        return e;
    }
    function P(e, t) {
        if (typeof t !== "function" && t !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                writable: true,
                configurable: true
            }
        });
        if (t) S(e, t);
    }
    function S(e, t) {
        S = Object.setPrototypeOf || function e(t, n) {
            t.__proto__ = n;
            return t;
        };
        return S(e, t);
    }
    function _(e) {
        var t = L();
        return function n() {
            var r = N(e), o;
            if (t) {
                var i = N(this).constructor;
                o = Reflect.construct(r, arguments, i);
            } else {
                o = r.apply(this, arguments);
            }
            return T(this, o);
        };
    }
    function T(e, t) {
        if (t && (g(t) === "object" || typeof t === "function")) {
            return t;
        }
        return I(e);
    }
    function I(e) {
        if (e === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return e;
    }
    function L() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(Reflect.construct(Date, [], (function() {})));
            return true;
        } catch (e) {
            return false;
        }
    }
    function N(e) {
        N = Object.setPrototypeOf ? Object.getPrototypeOf : function e(t) {
            return t.__proto__ || Object.getPrototypeOf(t);
        };
        return N(e);
    }
    function M(e, t, n) {
        if (t in e) {
            Object.defineProperty(e, t, {
                value: n,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            e[t] = n;
        }
        return e;
    }
    var q = /^[a-z0-9]+:/;
    var E = /^\/\//;
    var U = /^\//;
    var D = function e(t) {
        return t != null && U.test(t);
    };
    var z = function e(t) {
        return t != null && !q.test(t) && !E.test(t);
    };
    var H = {
        /** @private */
        allowDisabledLink: i().bool,
        children: i().node,
        disabled: i().oneOfType([ i().bool, i().oneOf([ "dimmed" ]) ]),
        elementRef: i().oneOfType([ i().func, i().object ]),
        onClick: i().func,
        openInNewContext: i().bool,
        navigationLabel: i().string,
        to: i().string
    };
    var K = {
        disabled: false,
        openInNewContext: false
    };
    function A(e) {
        return !!e.to && !e.disabled;
    }
    /**
 * `Clickable` renders as a `button` element, or as an `a` element if the `to` prop is set
 * and the `disabled` prop is `false`. This is called link mode.
 */    var B =  function(e) {
        P(n, e);
        var t = _(n);
        // @docs-props-type ClickablePropsBase
        // should use ClickablePropsBase but fails on refs - observe
                function n(e) {
            var r;
            x(this, n);
            r = t.call(this, e);
            M(I(r), "el", null);
            M(I(r), "handleMount", (function(e) {
                r.el = e;
                k(r.props.elementRef, e);
            }));
            M(I(r), "createHandleOnClick", (function() {
                var e = r.context, t = e.onClick, n = e.onLinkClick;
                return function(e) {
                    if (A(r.props)) {
                        // when user command-click on mac or ctrl-click on other platforms, and
                        // Tag is an <a>, let the click pass through, let the <a> to achieve user's
                        // intent of 'open in new context'
                        // on mac, ctrl-click will be caught and open option menu even before hitting
                        // the DOM, so we're safe to check both metaKey and ctrlKey here
                        // without platform sniffing
                        if ((e.metaKey || e.ctrlKey) && r.props.to) {
                            return;
                        }
                    }
                    if (r.props.onClick) {
                        r.props.onClick(e);
                    }
                    var o = r.props.onClick == null && t != null;
                    if (A(r.props) && (o || n != null)) {
                        var i = r.props.navigationLabel;
                        if (!i && u()(r.props.children)) {
                            i = r.props.children;
                        }
                        var l = {
                            to: r.getTransformedUrl(r.props.to),
                            originalTo: r.props.to,
                            openInNewContext: r.props.openInNewContext,
                            label: i
                        };
                        if (o) {
                            t(e, l);
                        }
                        n === null || n === void 0 ? void 0 : n(e, l);
                    }
                };
            }));
            M(I(r), "getTransformedUrl", (function(e) {
                var t = r.context.transformUrl;
                return t != null ? t(e, {
                    isInternal: z(e),
                    isRootRelative: D(e)
                }) : e;
            }));
            if (false) {}
            return r;
        }
        R(n, [ {
            key: "focus",
            /**
     * Place focus on the element.
     */
            value: function e() {
                var t;
                (t = this.el) === null || t === void 0 ? void 0 : t.focus();
            }
        }, {
            key: "render",
            value: function e() {
                var t = this.createHandleOnClick();
 // Only set the href attribute when enabled, and therefore using an <a> tag
                                if (A(this.props)) {
                    var n = this.props, o = n.children, i = n.openInNewContext, l = n.to, a = O(n, [ "children", "openInNewContext", "to" ]);
                    var u = i ? "_blank" : undefined;
                    var c = i && z(l) ? "noopener noreferrer" : undefined;
                    
                    return r().createElement(v, C({
                        "data-test": "clickable",
                        ref: this.handleMount,
                        href: this.getTransformedUrl(this.props.to),
                        target: u,
                        rel: c,
                        onClick: t
                    }, f()(a, "disabled", "elementRef", "onClick")), o);
                }
                if (this.props.allowDisabledLink) {
                    var s = this.props, p = s.children, d = O(s, [ "children" ]);
                    if (this.props.disabled && this.props.to != null) {
                        
                        return r().createElement(v, C({
                            "data-test": "clickable",
                            ref: this.handleMount,
                            role: "link",
                            "aria-disabled": "true"
                        }, f()(d, "href", "to", "elementRef", "onClick", "disabled")), p);
                    }
                }
 // button variant
                                var b = this.props, y = b.children, h = b.onClick, m = b.disabled, k = b.type, g = O(b, [ "children", "onClick", "disabled", "type" ]);
                
                return r().createElement(v, C({
                    as: "button",
                    "aria-disabled": m === "dimmed" || undefined,
                    "data-test": "clickable",
                    ref: this.handleMount,
                    type: k || "button",
                    disabled: m === true,
                    onClick: h && !m ? t : undefined
                }, f()(g, "elementRef", "openInNewContext", "to")), y);
            }
        } ]);
        return n;
    }(n.Component);
    M(B, "contextType", h);
    M(B, "propTypes", H);
    M(B, "defaultProps", K);
    M(B, s.legacyRefMode, true);
    /* harmony default export */    const F = B;
    // CONCATENATED MODULE: ./src/Clickable/index.ts
    module.exports = t;
    /******/})();