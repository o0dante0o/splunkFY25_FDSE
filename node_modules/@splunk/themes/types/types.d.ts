import { Interpolation as SCInterpolation } from 'styled-components';
import { Enterprise as EnterpriseVariables } from './enterprise';
import { Prisma as PrismaVariables } from './prisma';
type ColorScheme = 'light' | 'dark';
type Density = 'comfortable' | 'compact';
interface ThemeSettingsBase {
    colorScheme: ColorScheme;
    density: Density;
    isPrisma: boolean;
    isEnterprise: boolean;
    isComfortable: boolean;
    isCompact: boolean;
    isDark: boolean;
    isLight: boolean;
}
interface ThemeSettings<T extends AnyTheme = AnyTheme> extends ThemeSettingsBase {
    family: T extends Enterprise ? 'enterprise' : 'prisma';
}
type Enterprise = EnterpriseVariables & ThemeSettingsBase & {
    family: 'enterprise';
    isEnterprise: true;
};
type Prisma = PrismaVariables & ThemeSettingsBase & {
    family: 'prisma';
    isPrisma: true;
};
type CustomizeTheme<T extends AnyTheme = AnyTheme> = {
    bivarianceHack(theme: T): T;
}['bivarianceHack'];
type CustomizerSetting<T extends AnyTheme = AnyTheme> = {
    customizer?: CustomizeTheme<T>;
};
type ThemedProps<T extends AnyTheme = AnyTheme> = {
    theme: {
        splunkThemeV1: ThemeSettings<T>;
    };
};
type OptionalThemedProps<T extends AnyTheme = AnyTheme> = {
    theme?: {
        splunkThemeV1?: Partial<ThemeSettings<T>> & CustomizerSetting<T>;
    };
};
type AnyTheme = Enterprise | Prisma;
type VariableName<T extends AnyTheme> = keyof T;
type VariableNameExclusiveEnterprise = Exclude<VariableName<Enterprise>, VariableName<Prisma>>;
type VariableNameExclusivePrisma = Exclude<VariableName<Prisma>, VariableName<Enterprise>>;
type Variable<T extends AnyTheme, V extends VariableName<T>> = T[V];
type VariableInterpolation<T extends AnyTheme, V extends VariableName<T>> = (props: OptionalThemedProps<T>) => Variable<T, V>;
type UnsafeVariableInterpolation<T extends AnyTheme, V extends VariableName<T>> = (props: OptionalThemedProps<T>) => Variable<T, V> | undefined;
type Variables<T extends AnyTheme> = {
    [V in VariableName<T>]: VariableInterpolation<T, V>;
};
type VariablesExclusiveEnterprise = {
    [V in VariableNameExclusiveEnterprise]: UnsafeVariableInterpolation<Enterprise, V>;
};
type VariablesExclusivePrisma = {
    [V in VariableNameExclusivePrisma]: UnsafeVariableInterpolation<Prisma, V>;
};
type AllVariables = {
    [V in VariableName<AnyTheme>]: VariableInterpolation<AnyTheme, V>;
} & VariablesExclusiveEnterprise & VariablesExclusivePrisma;
type Interpolation<T extends AnyTheme, A extends object> = (props: OptionalThemedProps<T> & A) => InterpolationResult<T, A>;
type InterpolationResult<T extends AnyTheme, A extends object> = Interpolation<T, A> | SCInterpolation<ThemedProps<T> & A> | string | number | null;
type Tree<T extends AnyTheme, A extends object> = {
    enterprise?: TreeOrInterpolationResult<Enterprise, A>;
    prisma?: TreeOrInterpolationResult<Prisma, A>;
    light?: TreeOrInterpolationResult<T, A>;
    dark?: TreeOrInterpolationResult<T, A>;
    compact?: TreeOrInterpolationResult<T, A>;
    comfortable?: TreeOrInterpolationResult<T, A>;
};
type TreeOrInterpolationResult<T extends AnyTheme, A extends object> = Tree<T, A> | InterpolationResult<T, A>;
type ObjKeys = <T>(o: T) => Extract<keyof T, string>[];
export { AllVariables, AnyTheme, ColorScheme, CustomizerSetting, CustomizeTheme, Density, Enterprise, Interpolation, InterpolationResult, ObjKeys, OptionalThemedProps, Prisma, ThemedProps, ThemeSettings, Tree, TreeOrInterpolationResult, Variable, VariableInterpolation, VariableName, Variables, };
