name: Deploy Flask API to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Package and deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAMBDA_FLASK_FUNCTION_NAME: ${{ secrets.LAMBDA_FLASK_FUNCTION_NAME }}
        run: |
          cd backend
          zip -r9 ../function.zip *  # Empaqueta todo en backend y coloca el ZIP en el directorio superior
          aws lambda update-function-code \
            --function-name $LAMBDA_FLASK_FUNCTION_NAME \
            --zip-file fileb://../function.zip

      - name: Add API Gateway permissions
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAMBDA_FLASK_FUNCTION_NAME: ${{ secrets.LAMBDA_FLASK_FUNCTION_NAME }}
        run: |
          aws lambda add-permission \
            --function-name $LAMBDA_FLASK_FUNCTION_NAME \
            --statement-id apigateway-access \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com

      - name: Configure API Gateway
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          REST_API_ID=$(aws apigateway create-rest-api --name "FlaskAPI" --query 'id' --output text)
          RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $REST_API_ID --query 'items[0].id' --output text)

          # Add GET method
          aws apigateway put-method \
            --rest-api-id $REST_API_ID \
            --resource-id $RESOURCE_ID \
            --http-method GET \
            --authorization-type NONE

          aws apigateway put-integration \
            --rest-api-id $REST_API_ID \
            --resource-id $RESOURCE_ID \
            --http-method GET \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/arn:aws:lambda:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:function:$LAMBDA_FLASK_FUNCTION_NAME/invocations"

          # Add POST method
          aws apigateway put-method \
            --rest-api-id $REST_API_ID \
            --resource-id $RESOURCE_ID \
            --http-method POST \
            --authorization-type NONE

          aws apigateway put-integration \
            --rest-api-id $REST_API_ID \
            --resource-id $RESOURCE_ID \
            --http-method POST \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/arn:aws:lambda:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:function:$LAMBDA_FLASK_FUNCTION_NAME/invocations"

      - name: Deploy API Gateway
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws apigateway create-deployment \
            --rest-api-id $REST_API_ID \
            --stage-name prod

      - name: Invalidate CloudFront cache (optional)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"
